{"version":3,"sources":["utils.min.js","utils.js","uiEvent.js","truncate.js","tooltip.js","scrollOn.js","focusOn.js","tsTooltip.js","dropDown.js","tsDropDown.js","autoGrow.js"],"names":["angular","module","directive","$parse","priority","link","$scope","$elm","$attrs","events","$eval","uiEvent","forEach","eventName","fn","bind","evt","params","Array","prototype","slice","call","arguments","splice","$event","$params","$$phase","$apply","filter","value","wordLimit","ellipses","length","undefined","isNumber","words","split","join","$templateCache","$timeout","$compile","$window","restrict","scope","tsTooltip","tsTooltipDirection","tsTooltipEvent","tsTooltipShow","tsTooltipClass","tsTooltipContentHover","controller","this","setTranscluded","transclude","transcludedContentFn","$element","$attr","addTranscludedContent","clone","tooltipMain","empty","append","tooltipScope","offset","elem","docElem","win","rect","doc","getBoundingClientRect","width","height","getClientRects","ownerDocument","documentElement","top","pageYOffset","clientTop","left","pageXOffset","clientLeft","positionTooltip","origOffset","arrowBoxContainer","elementOffset","leftCommon","topCommon","direction","style","offsetHeight","ARROW_SIZE","offsetWidth","makeVisible","isVisible","document","body","insertBefore","tooltipContainer","childNodes","element","isHoveringContent","removeTooltip","makeInvisible","remove","toggleVisibility","template","get","eventType","children","$watch","clientHeight","find","addClass","on","newVal","oldVal","$on","$destroy","require","iElem","iAttr","tooltipController","pre","scrollOn","event","location","scrollTop","scrollHeight","focusOnConfig","listener","noop","$observe","speed","parents","targetWindow","animate","complete","focus","extraOffset","focusOnOffset","parseInt","autoCenter","autoCenterInputs","tagName","toUpperCase","focusOnAutoCenter","window","innerHeight","$","provider","focusConfig","$get","e","run","put","tsDropDownTemplate","tsDropDown","tsDropDownShow","tsDropDownWidth","tsItemClick","setPlaceholder","placeholderTransclude","setListItem","listItemTransclude","ngModelCtrl","moveHighlightDown","selectedIndex","hasOwnProperty","interactive","highlightedItem","moveHighlightUp","toggleDropDown","forceState","middleOfWindow","middleOfElement","dropDownListContainer","bottom","dropDownOpen","setHeight","dropdownHeight","listHeight","dropDownUnorderedList","outerHeight","updateSelected","selectedValue","placeholderScope","selectedItem","$evalAsync","read","$setViewValue","ae","placeholderElement","attr","container","textDisplayElement","dropDownArrow","querySelector","keyCode","preventDefault","isArray","dropDownItem","$new","item","listItem","createElement","compiledListItem","indexOf","i","child","$render","$viewValue","dropDownController","grow"],"mappings":"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","file":"utils.min.js","sourcesContent":["'use strict';\n\nangular.module('ts.utils', []);\n/**\n * @TODO remove in liue of ui-utils\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\n'use strict';\n\nangular.module('ts.utils').directive('uiEvent', function ($parse) {\n    return {\n        priority: 100,\n        link: function link($scope, $elm, $attrs) {\n            var events = $scope.$eval($attrs.uiEvent);\n            angular.forEach(events, function (uiEvent, eventName) {\n                var fn = $parse(uiEvent);\n                $elm.bind(eventName, function (evt) {\n                    var params = Array.prototype.slice.call(arguments);\n                    //Take out first paramater (event object);\n                    params = params.splice(1);\n                    fn($scope, { $event: evt, $params: params });\n                    if (!$scope.$$phase) {\n                        $scope.$apply();\n                    }\n                });\n            });\n        }\n    };\n});\n/**\n * truncate - Truncates a string by a specified number of words\n *\n * @example\n * \t<p>\n * \t\t{{::post.body | truncate : 35}}\n * \t\t<a ng-if=\"::post.body.split(' ').length>35\">Read More</a>\n * \t</p>\n *\n * @param {string} value  The string to be truncated\n * @param {int} [wordLimit] The number of words to truncate at. If falsey, doesn't truncate.\n * @param {string} [ellipses] The string to use as an ellipses. Default: '…' (&hellip;)\n */\n'use strict';\n\nangular.module('ts.utils').filter('tsTruncate', function () {\n  return function (value, wordLimit) {\n    var ellipses = arguments.length <= 2 || arguments[2] === undefined ? '…' : arguments[2];\n\n    if (!value || !angular.isNumber(wordLimit)) return value;\n\n    var words = value.split(' ');\n\n    if (words.length > wordLimit) {\n      value = words.slice(0, wordLimit).join(' ');\n\n      if (ellipses) value += ellipses;\n    }\n\n    return value;\n  };\n});\n/**\n * ts-tooltip - Shows a tooltip with an arrow pointing to the element the directive is applied to.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *<button\n *        ts-tooltip-event=\"click\"                              // Options are click or mouseover\n *        ts-tooltip=\"Something that shows up in there\"         // The text to show in the tooltip\n *        ts-tooltip-direction=\"bottom\"                         // The direction the tooltip pops up\n *        ts-tooltip-show=\"someModel.someBoolean\"               // A boolean if set will use this instead of events\n *        ts-tooltip-class=\"someClass\"                          // Adds class to tooltip container\n *        ts-tooltip-content-hover=\"someModel.someBoolean\"      // A boolean if set will allow users to\n *                                                              // hover over the tooltip content without closing it\n *        >\n *   Bottom Click Me\n * </button>\n *\n */\n\n'use strict';\n\nangular.module('ts.utils').directive('tsTooltip', function ($templateCache, $timeout, $compile, $window) {\n\n  return {\n    restrict: 'A',\n    scope: {\n      tsTooltip: '@',\n      tsTooltipDirection: '@',\n      tsTooltipEvent: '@',\n      tsTooltipShow: '=',\n      tsTooltipClass: '@',\n      tsTooltipContentHover: '@'\n    },\n    controller: function controller($scope) {\n      this.setTranscluded = function (transclude) {\n        $scope.transcludedContentFn = transclude;\n      };\n    },\n    link: function link($scope, $element, $attr) {\n      var origOffset;\n      var ARROW_SIZE = 10;\n      var template = $templateCache.get('templates/tsTooltip.html');\n      var direction = $scope.tsTooltipDirection || 'right';\n      var eventType = $scope.tsTooltipEvent || 'mouseenter';\n      var isVisible = false;\n\n      //Compile the container for the bindings on the CSS and text tooltip contents\n      var tooltipContainer = $compile(template)($scope);\n\n      //First DOM element child of the container, this is used for the position computations\n      var arrowBoxContainer = tooltipContainer.children()[0];\n\n      // Fix the position of the tooltip if the height of the tooltip itself changes.  This is necessary for dynamic\n      // content when absolutely positioning the tooltips.  Tooltips must be absolutely positioned in order to be\n      // separated from having their width restricted by their parent element or having a static width and since the\n      // total size of the tooltip is needed to compute the offset for it's top left corner we must watch the height.\n      $scope.$watch(function () {\n        return arrowBoxContainer.clientHeight;\n      }, positionTooltip);\n\n      //We need a good workaround for if the contents width changes to adjust to fix the position, less $watchers is ideal\n      // $scope.$watch(function(){return arrowBoxContainer.clientWidth}, positionTooltip);\n\n      // This is where we add the transcluded content will get placed it is one of the children of the container\n      $scope.tooltipMain = tooltipContainer.find(\"#tooltipMain\");\n      $scope.tooltipMain.addClass(direction);\n\n      function addTranscludedContent() {\n        if ($scope.transcludedContentFn) {\n          $scope.transcludedContentFn(function (clone, scope) {\n            $scope.tooltipMain.empty();\n            $scope.tooltipMain.append(clone);\n            $scope.tooltipScope = scope;\n          });\n        }\n      }\n\n      // Taken from jQuery so we don't have to directly depend on it for this\n      // calculates the top left offsets for a given element.\n      function offset(elem) {\n        var docElem, win, rect, doc;\n\n        if (!elem) {\n          return;\n        }\n\n        rect = elem.getBoundingClientRect();\n\n        // Make sure element is not hidden (display: none) or disconnected\n        if (rect.width || rect.height || elem.getClientRects().length) {\n          doc = elem.ownerDocument;\n          win = $window;\n          docElem = doc.documentElement;\n\n          return {\n            top: rect.top + win.pageYOffset - docElem.clientTop,\n            left: rect.left + win.pageXOffset - docElem.clientLeft\n          };\n        }\n      }\n\n      function positionTooltip() {\n        if (!origOffset) origOffset = offset(arrowBoxContainer);\n\n        var elementOffset = offset($element[0]);\n        if (elementOffset === undefined || origOffset == undefined) {\n          return;\n        }\n        var leftCommon = elementOffset.left - origOffset.left,\n            topCommon = elementOffset.top - origOffset.top;\n\n        //Sets the common top for left and right, or common left for top and bottom\n        switch (direction) {\n          case 'right':\n          case 'left':\n            arrowBoxContainer.style.top = topCommon + $element[0].offsetHeight - $scope.tooltipMain[0].offsetHeight / 2 - ARROW_SIZE + 'px';\n            break;\n          case 'top':\n          case 'bottom':\n            arrowBoxContainer.style.left = leftCommon + $element[0].offsetWidth / 2 - $scope.tooltipMain[0].offsetWidth / 2 + 'px';\n            break;\n        }\n\n        //Sets the specific left or top values for each direction\n        switch (direction) {\n          case 'right':\n            arrowBoxContainer.style.left = leftCommon + $element[0].offsetWidth + ARROW_SIZE + 'px';\n            break;\n          case 'left':\n            arrowBoxContainer.style.left = leftCommon - $scope.tooltipMain[0].offsetWidth - ARROW_SIZE + 'px';\n            break;\n          case 'top':\n            arrowBoxContainer.style.top = topCommon - $scope.tooltipMain[0].offsetHeight - ARROW_SIZE + 'px';\n            break;\n          case 'bottom':\n            arrowBoxContainer.style.top = topCommon + $element[0].offsetHeight + ARROW_SIZE + 'px';\n            break;\n        }\n      }\n\n      function makeVisible() {\n        if (!isVisible) {\n          document.body.insertBefore(tooltipContainer[0], document.body.childNodes[0]);\n          addTranscludedContent();\n          positionTooltip();\n          isVisible = true;\n          if ($scope.tsTooltipContentHover) {\n            angular.element(tooltipContainer).bind('mouseleave', function () {\n              $scope.isHoveringContent = false;\n              removeTooltip();\n            });\n            angular.element(tooltipContainer).bind('mouseenter', function () {\n              $scope.isHoveringContent = true;\n            });\n          }\n        }\n      }\n\n      function makeInvisible() {\n        if (isVisible) {\n          if ($scope.tsTooltipContentHover) {\n            $timeout(function () {\n              if ($scope.isHoveringContent) return;else {\n                removeTooltip();\n              }\n            }, 250);\n          } else {\n            removeTooltip();\n          }\n        }\n      }\n\n      function removeTooltip() {\n        isVisible = false;\n        tooltipContainer.remove();\n      }\n\n      function toggleVisibility() {\n        isVisible ? makeInvisible() : makeVisible();\n      }\n\n      if ($attr.tsTooltipShow === undefined) {\n        switch (eventType) {\n          case 'mouseenter':\n            $element.on('mouseenter', makeVisible);\n            $element.on('mouseleave', makeInvisible);\n            break;\n          case 'click':\n            $element.on('click', toggleVisibility);\n            break;\n        }\n      } else {\n        $scope.$watch('tsTooltipShow', function (newVal, oldVal) {\n          if (newVal) {\n            makeVisible();\n          } else {\n            makeInvisible();\n          }\n        });\n      }\n\n      //Clean up the tooltip and destroy the scope for the transcluded element\n      $scope.$on('$destroy', function () {\n        if ($scope.tooltipScope) $scope.tooltipScope.$destroy();\n        arrowBoxContainer.remove();\n      });\n    }\n  };\n}).directive('tsTooltipContent', function () {\n  return {\n    restrict: 'E',\n    require: '^tsTooltip',\n    transclude: 'element',\n    link: function link(scope, iElem, iAttr, tooltipController, transclude) {\n      tooltipController.setTranscluded(transclude);\n    }\n  };\n});\n\n/**\n * scrollOn - $broadcast()/$emit() a $scope event with the location to trigger scrolling\n *\n * @example\n *   <ul scroll-on=\"someEventName\" style=\"overflow: auto\">...</ul>\n *   ...\n *   var location = 'bottom';\n *   $scope.$broadcast('someEventName', location)\n *\n * @param location {'top'|'bottom'|offset} must be passed as event data\n */\n'use strict';\n\nangular.module('ts.utils').directive('scrollOn', function ($timeout) {\n  return {\n    link: {\n      pre: function pre($scope, $element, $attrs) {\n        $scope.$on($attrs.scrollOn, function (event, location) {\n          // let updates render\n          $timeout(function () {\n            if (location === 'bottom') {\n              $element[0].scrollTop = $element[0].scrollHeight;\n            } else if (location === 'top') {\n              $element[0].scrollTop = 0;\n            } else {\n              $element[0].scrollTop = location;\n            }\n          }, true);\n        });\n      }\n    }\n  };\n});\n/**\n * focusOn - Focuses an input on scope event\n *\n * @note depends on jQuery\n *\n * @example\n *   <input focus-on=\"someEventName\">\n *   or\n *   <input focus-on=\"focus-row-{{$index}}\">\n *   or\n *   <p focus-on=\"anotherEvent\"></p>\n *   ...\n *   $scope.$broadcast('someEventName');\n *   $scope.$broadcast('focus-row-2');\n *   $scope.$broadcast('anotherEvent');\n *\n *   focusOnConfigProvider - can be injected into a .config(function(focusOnConfigProvider){}) block to configure the\n *   app wide settings for the focusOn directive\n *\n *   Settings include:\n *      offset - number of pixels to offset the scroll to for a header or other info that appears above the element you\n *      want to scroll to the top of the screen.  The offset is subtracted from the computed scroll position\n *\n *      autoCenter - boolean if true will use the element height and document body height to scroll the element to the\n *      center of the screen instead of the top\n *\n *   App wide settings can be overridden using attributes along with the focus-on directive.  The attributes for the\n *   offset and autoCenter are focus-on-offset and focus-on-auto-center respectively.\n *\n */\n'use strict';\n\nangular.module('ts.utils').directive('focusOn', function ($window, focusOnConfig) {\n  return {\n    link: function link($scope, $element, $attrs) {\n      var listener = angular.noop;\n      $attrs.$observe('focusOn', function (newVal) {\n        // Stop listening to old event name\n        listener();\n        // Listen to new event name\n        listener = $scope.$on(newVal, function (speed) {\n          speed = speed || 1000;\n          // Center element on screen\n          if ($element.parents('.reveal-modal').length) {\n            var targetWindow = $element.parents('.reveal-modal .content');\n            targetWindow.animate({\n              scrollTop: $element.offset().top - targetWindow.offset().top + targetWindow.scrollTop()\n            }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          } else {\n            var offset = $element.offset().top;\n\n            // Use provider configured offset\n            var extraOffset = focusOnConfig.offset;\n\n            // If attribute is set override provider configured offset\n            if ($attrs.focusOnOffset !== undefined) {\n              extraOffset = parseInt($attrs.focusOnOffset);\n            }\n\n            // Check if provider or attribute set autoCenter/auto-center to true if so use offset/2 ignores the extra\n            // offset in this case\n            if ((focusOnConfig.autoCenter || focusOnConfig.autoCenterInputs && $element[0].tagName.toUpperCase() == 'INPUT' || focusOnConfig.autoCenterInputs && $element[0].tagName.toUpperCase() == 'TEXTAREA') && $attrs.focusOnAutoCenter === undefined || $attrs.focusOnAutoCenter && $attrs.focusOnAutoCenter == 'true') {\n              offset = offset - window.innerHeight / 2 - $element[0].clientHeight / 2;\n            } else {\n              offset = offset - extraOffset;\n            }\n\n            $('body').animate({ scrollTop: offset }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n}).provider('focusOnConfig', function () {\n  var focusConfig = {\n    offset: 0,\n    autoCenter: false,\n    autoCenterInputs: false\n  };\n\n  this.autoCenter = function (value) {\n    focusConfig.autoCenter = value;\n  };\n\n  this.autoCenterInputs = function (value) {\n    focusConfig.autoCenterInputs = value;\n  };\n\n  this.offset = function (value) {\n    focusConfig.offset = value;\n  };\n\n  this.$get = function () {\n    return focusConfig;\n  };\n});\n'use strict';\n\n(function (module) {\n  try {\n    module = angular.module('ts.utils');\n  } catch (e) {\n    module = angular.module('ts.utils', []);\n  }\n  module.run(['$templateCache', function ($templateCache) {\n    $templateCache.put('templates/tsTooltip.html', '<div class=\"ts-tooltip-container {{::tsTooltipClass}}\">\\n' + '  <div class=\"arrow-box-container\">\\n' + '    <div id=\"tooltipMain\" class=\"ts-tooltip-main\">\\n' + '      {{tsTooltip}}\\n' + '    </div>\\n' + '  </div>\\n' + '</div>\\n' + '');\n  }]);\n})();\n/**\n * ts-dropwdown - Shows a drop down list of items that can be selected from.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *\n */\n\n'use strict';\nangular.module('ts.utils').directive('tsDropDown', function ($templateCache, $compile, $timeout) {\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    //transclude: {\n    //  'listItem':'tsListItem',\n    //  'placeholder':'tsPlaceholder'\n    //},\n    scope: {\n      tsDropDownTemplate: '@',\n      tsDropDown: '=',\n      tsDropDownShow: '=',\n      tsDropDownWidth: '=',\n      tsItemClick: '&'\n    },\n    controller: function controller($scope) {\n      this.setPlaceholder = function (transclude) {\n        $scope.placeholderTransclude = transclude;\n      };\n      this.setListItem = function (transclude) {\n        $scope.listItemTransclude = transclude;\n      };\n    },\n\n    link: function link($scope, $element, $attr, ngModelCtrl) {\n      var selectedIndex = 0,\n          ae = angular.element,\n          //shorthand\n      placeholderElement = undefined,\n          placeholderScope = undefined,\n          selectedItem = undefined,\n          setHeight = false;\n\n      //Makes the element focusable with the keyboard\n      $element.attr('tabindex', '0');\n\n      $scope.direction = 'down';\n      $scope.dropDownOpen = false;\n\n      var template = $templateCache.get('templates/tsDropDown.html');\n      var container = $compile(template)($scope); //Container for all the drop down related parts\n      $element.append(container);\n\n      var textDisplayElement = ae(container.children()[0]),\n          //First child of the container is the place to put the placeholder or selected item\n      dropDownArrow = ae(container.children()[1]),\n          //Second child is the drop down arrow/button\n      dropDownListContainer = ae(container.children()[2]),\n          //Third child is the list container\n      dropDownUnorderedList = ae($element[0].querySelector('ul'));\n\n      $element.on('keydown', function (event) {\n        switch (event.keyCode) {\n          case 13:\n            //enter\n            updateSelected($scope.highlightedItem);\n            toggleDropDown();\n            event.preventDefault();\n            break;\n\n          case 38:\n            //up\n\n            // If list isn't open, open it\n            if (!$scope.dropDownOpen) {\n              toggleDropDown();\n            } else {\n              // otherwise if the list is open move up in the highlights.\n              $scope.$apply(moveHighlightUp);\n            }\n            event.preventDefault();\n            break;\n\n          case 40:\n            //down\n\n            //If list isn't open, open it\n            if (!$scope.dropDownOpen) {\n              toggleDropDown();\n            } else {\n              $scope.$apply(moveHighlightDown);\n            }\n            event.preventDefault();\n            break;\n        }\n      });\n\n      function moveHighlightDown() {\n        while ($scope.tsDropDown.length - 1 > selectedIndex) {\n          selectedIndex++;\n          if (!$scope.tsDropDown[selectedIndex].hasOwnProperty('interactive') || $scope.tsDropDown[selectedIndex].interactive === true) break;\n        }\n        $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n      }\n\n      function moveHighlightUp() {\n        while (0 < selectedIndex) {\n          selectedIndex--;\n          if (!$scope.tsDropDown[selectedIndex].hasOwnProperty('interactive') || $scope.tsDropDown[selectedIndex].interactive === true) break;\n        }\n        $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n      }\n\n      $scope.$watch('tsDropDown', function () {\n        if (angular.isArray($scope.tsDropDown)) {\n          $scope.tsDropDown.forEach(function (dropDownItem) {\n\n            if ($scope.listItemTransclude) {\n              $scope.listItemTransclude($scope.$new(), function (clone, scope) {\n                scope.item = dropDownItem;\n\n                var listItem = ae(document.createElement('li'));\n                listItem.attr('ng-class', '{\"highlighted\":highlightedItem==item}');\n                var compiledListItem = $compile(listItem)(scope);\n                compiledListItem.append(clone[0]);\n\n                //Adds event handlers if the item isn't explicitly marked non interactive\n                if (!dropDownItem.hasOwnProperty('interactive') || dropDownItem.interactive === true) {\n                  compiledListItem.on('click', function () {\n                    updateSelected(dropDownItem);\n                    if ($scope.tsItemClick) $scope.tsItemClick({ item: dropDownItem });\n                    $scope.$apply(toggleDropDown);\n                  });\n                  compiledListItem.on('mouseenter', function () {\n                    $scope.highlightedItem = scope.item;\n                    selectedIndex = $scope.tsDropDown.indexOf(scope.item);\n                    $scope.$apply();\n                  });\n                }\n\n                compiledListItem[0].style.width = (scope.tsDropDownWidth || textDisplayElement[0].offsetWidth + dropDownArrow[0].offsetWidth) + 'px';\n\n                dropDownUnorderedList.append(compiledListItem);\n              });\n            }\n          });\n        }\n      });\n\n      $scope.$watch('tsDropDownWidth', function (newVal) {\n        if (newVal) {\n          for (var i = 0; i < dropDownUnorderedList.children().length; i++) {\n            var child = dropDownUnorderedList.children()[i];\n            child.style.width = newVal + 'px';\n          }\n        }\n      });\n\n      //Initialize to first item is highlighted\n      $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n\n      if ($scope.placeholderTransclude) {\n        $scope.placeholderTransclude($scope.$new(), function (clone, scope) {\n          placeholderScope = scope;\n          placeholderElement = clone[0];\n\n          textDisplayElement.append(clone[0]);\n        });\n      }\n\n      // Take the height of the window divided by 2 to get the middle of the window\n      // if the element's middle is lower than the middle of the window then open upward\n      // otherwise open downward\n      function toggleDropDown(forceState) {\n        var rect = $element[0].getBoundingClientRect();\n        var middleOfWindow = window.innerHeight / 2;\n        var middleOfElement = rect.top + rect.height / 2;\n\n        if (middleOfElement > middleOfWindow) {\n          $scope.direction = 'up';\n\n          dropDownListContainer[0].style.bottom = rect.height + 'px';\n          dropDownListContainer[0].style.top = 'auto';\n        } else {\n          dropDownListContainer[0].style.top = rect.height + 'px';\n          dropDownListContainer[0].style.bottom = 'auto';\n          $scope.direction = 'down';\n        }\n\n        if (forceState === true || forceState === false) {\n          $scope.dropDownOpen = forceState;\n        } else {\n          $scope.dropDownOpen = !$scope.dropDownOpen;\n          $scope.tsDropDownShow = $scope.dropDownOpen;\n        }\n        if (setHeight) return;\n\n        $timeout(function () {\n          setHeight = true;\n          var dropdownHeight;\n          var listHeight = dropDownUnorderedList.outerHeight() + 2;\n          if (listHeight > window.innerHeight * .33) dropdownHeight = window.innerHeight * .33;else dropdownHeight = listHeight;\n          dropDownListContainer[0].style.height = dropdownHeight + 'px';\n        }, 0);\n      }\n\n      textDisplayElement.on('click', function () {\n        $scope.$apply(toggleDropDown);\n      });\n      dropDownArrow.on('click', function () {\n        $scope.$apply(toggleDropDown);\n      });\n\n      $scope.$watch('tsDropDownShow', function (newVal, oldVal) {\n        if (newVal !== undefined) toggleDropDown(newVal);\n      });\n\n      if (!ngModelCtrl) return; // do nothing if no ng-model\n\n      function updateSelected(selectedValue) {\n        placeholderScope.selectedItem = selectedItem = selectedValue;\n        $scope.$evalAsync(read);\n      }\n\n      $element.on('blur', function () {\n        $scope.$apply(function () {\n          $scope.dropDownOpen = false;\n        });\n      });\n\n      // Specify how UI should be updated when the model changes from outside\n      ngModelCtrl.$render = function () {\n        //update selected element text\n        updateSelected(ngModelCtrl.$viewValue || '');\n      };\n\n      // Write data to the model\n      function read() {\n        ngModelCtrl.$setViewValue(selectedItem);\n      }\n    }\n\n  };\n}).directive('tsPlaceholder', function () {\n  return {\n    restrict: 'E',\n    require: '^tsDropDown',\n    transclude: 'element',\n    link: function link(scope, iElem, iAttr, dropDownController, transclude) {\n      dropDownController.setPlaceholder(transclude);\n    }\n  };\n}).directive('tsListItem', function () {\n  return {\n    restrict: 'E',\n    require: '^tsDropDown',\n    transclude: 'element',\n    link: function link(scope, iElem, iAttr, dropDownController, transclude) {\n      dropDownController.setListItem(transclude);\n    }\n  };\n});\n'use strict';\n\n(function (module) {\n  try {\n    module = angular.module('ts.utils');\n  } catch (e) {\n    module = angular.module('ts.utils', []);\n  }\n  module.run(['$templateCache', function ($templateCache) {\n    $templateCache.put('templates/tsDropDown.html', '<div class=\"drop-down-container\">\\n' + '  <div class=\"selected-item-container\">\\n' + '  </div><div class=\"arrow-container\" ng-class=\"{\\'arrow-default\\':!dropDownOpen, \\'arrow-open\\':dropDownOpen}\">\\n' + '  </div>\\n' + '  <div ng-show=\"dropDownOpen\"\\n' + '       class=\"drop-down-list-container\">\\n' + '    <ul>\\n' + '    </ul>\\n' + '  </div>\\n' + '</div>');\n  }]);\n})();\n/**\n * autoGrow - Increases height of textarea while typing\n *\n * @note use with min-height, max-height and box-sizing:border-box\n *\n * @example\n * \t<textarea auto-grow></textarea>\n */\n'use strict';\n\nangular.module('ts.utils').directive('autoGrow', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link($scope, $element, $attrs) {\n      function grow() {\n        $element[0].style.height = 0; // autoshrink - need accurate scrollHeight\n        $element[0].style.height = $element[0].scrollHeight + 'px';\n      }\n      $element.on('input', grow);\n      $timeout(grow, true);\n    }\n  };\n});","angular.module('ts.utils', []);\n","/**\n * @TODO remove in liue of ui-utils\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\nangular.module('ts.utils').directive('uiEvent', function ($parse) {\n    return {\n        priority: 100,\n        link: function ($scope, $elm, $attrs) {\n            var events = $scope.$eval($attrs.uiEvent);\n            angular.forEach(events, function (uiEvent, eventName) {\n                var fn = $parse(uiEvent);\n                $elm.bind(eventName, function (evt) {\n                    var params = Array.prototype.slice.call(arguments);\n                    //Take out first paramater (event object);\n                    params = params.splice(1);\n                    fn($scope, {$event: evt, $params: params});\n                    if (!$scope.$$phase) {\n                        $scope.$apply();\n                    }\n                });\n            });\n        }\n    };\n});\n","/**\n * truncate - Truncates a string by a specified number of words\n *\n * @example\n * \t<p>\n * \t\t{{::post.body | truncate : 35}}\n * \t\t<a ng-if=\"::post.body.split(' ').length>35\">Read More</a>\n * \t</p>\n *\n * @param {string} value  The string to be truncated\n * @param {int} [wordLimit] The number of words to truncate at. If falsey, doesn't truncate.\n * @param {string} [ellipses] The string to use as an ellipses. Default: '…' (&hellip;)\n */\n angular.module('ts.utils').filter('tsTruncate', function() {\n  return function(value, wordLimit, ellipses = '…'){\n    if (!value || !angular.isNumber(wordLimit))\n      return value;\n\n    var words = value.split(' ');\n\n    if (words.length > wordLimit) {\n      value = words.slice(0, wordLimit).join(' ');\n\n      if (ellipses)\n        value += ellipses;\n    }\n\n    return value;\n  }\n});\n","/**\n * ts-tooltip - Shows a tooltip with an arrow pointing to the element the directive is applied to.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *<button\n *        ts-tooltip-event=\"click\"                              // Options are click or mouseover\n *        ts-tooltip=\"Something that shows up in there\"         // The text to show in the tooltip\n *        ts-tooltip-direction=\"bottom\"                         // The direction the tooltip pops up\n *        ts-tooltip-show=\"someModel.someBoolean\"               // A boolean if set will use this instead of events\n *        ts-tooltip-class=\"someClass\"                          // Adds class to tooltip container\n *        ts-tooltip-content-hover=\"someModel.someBoolean\"      // A boolean if set will allow users to\n *                                                              // hover over the tooltip content without closing it\n *        >\n *   Bottom Click Me\n * </button>\n *\n */\n\n'use strict';\n\nangular.module('ts.utils')\n\n  .directive('tsTooltip', function($templateCache, $timeout, $compile, $window){\n\n    return {\n      restrict:'A',\n      scope:{\n        tsTooltip:'@',\n        tsTooltipDirection:'@',\n        tsTooltipEvent:'@',\n        tsTooltipShow:'=',\n        tsTooltipClass: '@',\n        tsTooltipContentHover: '@'\n      },\n      controller: function($scope){\n        this.setTranscluded = function(transclude){\n          $scope.transcludedContentFn = transclude;\n        }\n      },\n      link: function($scope, $element, $attr) {\n        var origOffset;\n        var ARROW_SIZE = 10;\n        var template = $templateCache.get('templates/tsTooltip.html');\n        var direction = $scope.tsTooltipDirection || 'right';\n        var eventType = $scope.tsTooltipEvent || 'mouseenter';\n        var isVisible = false;\n\n        //Compile the container for the bindings on the CSS and text tooltip contents\n        var tooltipContainer = $compile(template)($scope);      \n\n        //First DOM element child of the container, this is used for the position computations\n        var arrowBoxContainer = tooltipContainer.children()[0]; \n\n        // Fix the position of the tooltip if the height of the tooltip itself changes.  This is necessary for dynamic\n        // content when absolutely positioning the tooltips.  Tooltips must be absolutely positioned in order to be\n        // separated from having their width restricted by their parent element or having a static width and since the\n        // total size of the tooltip is needed to compute the offset for it's top left corner we must watch the height.\n        $scope.$watch(function(){return arrowBoxContainer.clientHeight}, positionTooltip);\n\n        //We need a good workaround for if the contents width changes to adjust to fix the position, less $watchers is ideal\n        // $scope.$watch(function(){return arrowBoxContainer.clientWidth}, positionTooltip);\n\n        // This is where we add the transcluded content will get placed it is one of the children of the container\n        $scope.tooltipMain = tooltipContainer.find(\"#tooltipMain\");\n        $scope.tooltipMain.addClass(direction);\n\n\n        function addTranscludedContent(){\n          if($scope.transcludedContentFn){\n            $scope.transcludedContentFn(function(clone, scope) {\n              $scope.tooltipMain.empty();\n              $scope.tooltipMain.append(clone);\n              $scope.tooltipScope = scope;\n            });\n          }\n        }\n\n        // Taken from jQuery so we don't have to directly depend on it for this\n        // calculates the top left offsets for a given element.\n        function offset( elem ) {\n          var docElem, win, rect, doc;\n\n          if ( !elem ) {\n            return;\n          }\n\n          rect = elem.getBoundingClientRect();\n\n          // Make sure element is not hidden (display: none) or disconnected\n          if ( rect.width || rect.height || elem.getClientRects().length ) {\n            doc = elem.ownerDocument;\n            win = $window;\n            docElem = doc.documentElement;\n\n            return {\n              top: rect.top + win.pageYOffset - docElem.clientTop,\n              left: rect.left + win.pageXOffset - docElem.clientLeft\n            };\n          }\n        }\n\n        function positionTooltip(){\n          if(!origOffset)\n            origOffset = offset(arrowBoxContainer);\n\n          let elementOffset = offset($element[0]);\n          if(elementOffset === undefined || origOffset == undefined) {\n            return;\n          }\n          let leftCommon = elementOffset.left-origOffset.left,\n            topCommon = elementOffset.top-origOffset.top;\n\n          //Sets the common top for left and right, or common left for top and bottom\n          switch(direction){\n            case 'right':\n            case 'left':\n              arrowBoxContainer.style.top = (topCommon + $element[0].offsetHeight - $scope.tooltipMain[0].offsetHeight/2 - ARROW_SIZE) + 'px';\n              break;\n            case 'top':\n            case 'bottom':\n              arrowBoxContainer.style.left = leftCommon + $element[0].offsetWidth/2 - $scope.tooltipMain[0].offsetWidth/2 + 'px';\n              break;\n          }\n\n          //Sets the specific left or top values for each direction\n          switch(direction) {\n            case 'right':\n              arrowBoxContainer.style.left = leftCommon + $element[0].offsetWidth+ARROW_SIZE + 'px';\n              break;\n            case 'left':\n              arrowBoxContainer.style.left = (leftCommon-$scope.tooltipMain[0].offsetWidth - ARROW_SIZE ) + 'px';\n              break;\n            case 'top':\n              arrowBoxContainer.style.top = topCommon - $scope.tooltipMain[0].offsetHeight - ARROW_SIZE + 'px';\n              break;\n            case 'bottom':\n              arrowBoxContainer.style.top = topCommon + $element[0].offsetHeight + ARROW_SIZE + 'px';\n              break;\n          }\n        }\n\n        function makeVisible() {\n          if (!isVisible) {\n            document.body.insertBefore(tooltipContainer[0], document.body.childNodes[0]);\n            addTranscludedContent();\n            positionTooltip();\n            isVisible = true;\n            if($scope.tsTooltipContentHover) {\n              angular.element(tooltipContainer).bind('mouseleave', function(){\n                $scope.isHoveringContent = false;\n                removeTooltip();\n              });\n              angular.element(tooltipContainer).bind('mouseenter', function(){\n                $scope.isHoveringContent = true;\n              });\n            }\n          }\n        }\n\n        function makeInvisible() {\n          if (isVisible) {\n            if($scope.tsTooltipContentHover) {\n              $timeout( () => {\n                if($scope.isHoveringContent)\n                  return;\n                else {\n                  removeTooltip();\n                }\n              }, 250)\n            } else {\n              removeTooltip();\n            }\n          }\n        }\n\n        function removeTooltip() {\n          isVisible = false;\n          tooltipContainer.remove();\n        }\n\n        function toggleVisibility() {\n          isVisible ? makeInvisible() : makeVisible();\n        }\n\n        if($attr.tsTooltipShow === undefined) {\n          switch(eventType) {\n            case 'mouseenter':\n              $element.on('mouseenter', makeVisible);\n              $element.on('mouseleave', makeInvisible);\n              break;\n            case 'click':\n              $element.on('click', toggleVisibility);\n              break;\n          }\n        }\n        else{\n          $scope.$watch('tsTooltipShow',function(newVal, oldVal) {\n            if(newVal) {\n              makeVisible();\n            }\n            else {\n              makeInvisible();\n            }\n          })\n        }\n\n        //Clean up the tooltip and destroy the scope for the transcluded element\n        $scope.$on('$destroy',function() {\n          if($scope.tooltipScope)\n            $scope.tooltipScope.$destroy();\n          arrowBoxContainer.remove();\n        });\n      }\n    };\n  })\n  .directive('tsTooltipContent', function(){\n    return {\n      restrict:'E',\n      require: '^tsTooltip',\n      transclude: 'element',\n      link: function(scope, iElem, iAttr, tooltipController, transclude){\n        tooltipController.setTranscluded(transclude);\n      }\n    }\n  })\n;\n","\n/**\n * scrollOn - $broadcast()/$emit() a $scope event with the location to trigger scrolling\n *\n * @example\n *   <ul scroll-on=\"someEventName\" style=\"overflow: auto\">...</ul>\n *   ...\n *   var location = 'bottom';\n *   $scope.$broadcast('someEventName', location)\n *\n * @param location {'top'|'bottom'|offset} must be passed as event data\n */\nangular.module('ts.utils').directive('scrollOn', function($timeout) {\n  return {\n    link: {\n      pre: function($scope, $element, $attrs) {\n        $scope.$on($attrs.scrollOn, function(event, location){\n          // let updates render\n          $timeout(function(){\n            if (location === 'bottom') {\n              $element[0].scrollTop = $element[0].scrollHeight;\n            }\n            else if (location === 'top') {\n              $element[0].scrollTop = 0;\n            }\n            else {\n              $element[0].scrollTop = location;\n            }\n          }, true);\n        });\n      }\n    }\n  };\n});\n","/**\n * focusOn - Focuses an input on scope event\n *\n * @note depends on jQuery\n *\n * @example\n *   <input focus-on=\"someEventName\">\n *   or\n *   <input focus-on=\"focus-row-{{$index}}\">\n *   or\n *   <p focus-on=\"anotherEvent\"></p>\n *   ...\n *   $scope.$broadcast('someEventName');\n *   $scope.$broadcast('focus-row-2');\n *   $scope.$broadcast('anotherEvent');\n *\n *   focusOnConfigProvider - can be injected into a .config(function(focusOnConfigProvider){}) block to configure the\n *   app wide settings for the focusOn directive\n *\n *   Settings include:\n *      offset - number of pixels to offset the scroll to for a header or other info that appears above the element you\n *      want to scroll to the top of the screen.  The offset is subtracted from the computed scroll position\n *\n *      autoCenter - boolean if true will use the element height and document body height to scroll the element to the\n *      center of the screen instead of the top\n *\n *   App wide settings can be overridden using attributes along with the focus-on directive.  The attributes for the\n *   offset and autoCenter are focus-on-offset and focus-on-auto-center respectively.\n *\n */\nangular.module('ts.utils')\n  .directive('focusOn', function($window, focusOnConfig){\n    return {\n      link: function($scope, $element, $attrs) {\n        var listener = angular.noop;\n        $attrs.$observe('focusOn', function(newVal){\n          // Stop listening to old event name\n          listener();\n          // Listen to new event name\n          listener = $scope.$on(newVal, function(speed){\n            speed = speed || 1000;\n            // Center element on screen\n            if($element.parents('.reveal-modal').length) {\n              var targetWindow = $element.parents('.reveal-modal .content');\n              targetWindow.animate({\n                scrollTop: $element.offset().top - targetWindow.offset().top + targetWindow.scrollTop()\n              }, {\n                speed: speed,\n                complete: function complete() {\n                  // Focus element (if input)\n                  $element[0].focus();\n                }\n              });\n            }\n            else {\n              var offset = $element.offset().top;\n\n              // Use provider configured offset\n              var extraOffset = focusOnConfig.offset;\n\n              // If attribute is set override provider configured offset\n              if($attrs.focusOnOffset !== undefined){\n                extraOffset = parseInt($attrs.focusOnOffset);\n              }\n\n              // Check if provider or attribute set autoCenter/auto-center to true if so use offset/2 ignores the extra\n              // offset in this case\n              if(\n                (\n                (\n                  focusOnConfig.autoCenter ||\n                  focusOnConfig.autoCenterInputs && $element[0].tagName.toUpperCase()=='INPUT' ||\n                  focusOnConfig.autoCenterInputs && $element[0].tagName.toUpperCase()=='TEXTAREA'\n                )\n                && $attrs.focusOnAutoCenter===undefined ) ||\n                ($attrs.focusOnAutoCenter && $attrs.focusOnAutoCenter=='true') ) {\n                offset = offset - window.innerHeight/2 - $element[0].clientHeight/2;\n              }\n              else{\n                offset = offset - extraOffset;\n              }\n\n              $('body').animate({ scrollTop: offset }, {\n                speed: speed,\n                complete: function complete() {\n                  // Focus element (if input)\n                  $element[0].focus();\n                }\n              });\n            }\n          });\n        });\n      }\n    };\n  })\n\n  .provider('focusOnConfig', function(){\n    var focusConfig = {\n      offset: 0,\n      autoCenter:false,\n      autoCenterInputs:false\n    };\n\n    this.autoCenter = function(value){\n      focusConfig.autoCenter = value;\n    };\n\n    this.autoCenterInputs = function(value){\n      focusConfig.autoCenterInputs = value;\n    };\n\n    this.offset = function(value){\n      focusConfig.offset = value;\n    };\n\n    this.$get = function(){\n      return focusConfig;\n    };\n\n  });","(function(module) {\ntry {\n  module = angular.module('ts.utils');\n} catch (e) {\n  module = angular.module('ts.utils', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('templates/tsTooltip.html',\n    '<div class=\"ts-tooltip-container {{::tsTooltipClass}}\">\\n' +\n    '  <div class=\"arrow-box-container\">\\n' +\n    '    <div id=\"tooltipMain\" class=\"ts-tooltip-main\">\\n' +\n    '      {{tsTooltip}}\\n' +\n    '    </div>\\n' +\n    '  </div>\\n' +\n    '</div>\\n' +\n    '');\n}]);\n})();\n","/**\n * ts-dropwdown - Shows a drop down list of items that can be selected from.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *\n */\n\n'use strict';\nangular.module('ts.utils')\n\n  .directive('tsDropDown', function($templateCache, $compile, $timeout) {\n\n    return {\n      restrict:'A',\n      require: 'ngModel',\n      //transclude: {\n      //  'listItem':'tsListItem',\n      //  'placeholder':'tsPlaceholder'\n      //},\n      scope:{\n        tsDropDownTemplate:'@',\n        tsDropDown: '=',\n        tsDropDownShow:'=',\n        tsDropDownWidth: '=',\n        tsItemClick: '&'\n      },\n      controller: function($scope){\n        this.setPlaceholder = function(transclude){\n          $scope.placeholderTransclude = transclude;\n        }\n        this.setListItem = function(transclude){\n          $scope.listItemTransclude = transclude;\n        }\n      },\n\n      link: function($scope, $element, $attr, ngModelCtrl) {\n        let selectedIndex = 0,\n            ae = angular.element, //shorthand\n            placeholderElement,\n            placeholderScope,\n            selectedItem,\n            setHeight = false;\n\n        //Makes the element focusable with the keyboard\n        $element.attr('tabindex','0');\n\n        $scope.direction = 'down';\n        $scope.dropDownOpen = false;\n\n        var template = $templateCache.get('templates/tsDropDown.html');\n        var container = $compile(template)($scope); //Container for all the drop down related parts\n        $element.append(container);\n\n        let textDisplayElement = ae(container.children()[0]), //First child of the container is the place to put the placeholder or selected item\n          dropDownArrow = ae(container.children()[1]), //Second child is the drop down arrow/button\n          dropDownListContainer = ae(container.children()[2]), //Third child is the list container\n          dropDownUnorderedList = ae($element[0].querySelector('ul'))\n\n        $element.on('keydown', function(event) {\n          switch(event.keyCode){\n            case 13: //enter\n              updateSelected($scope.highlightedItem);\n              toggleDropDown();\n              event.preventDefault();\n              break;\n\n            case 38: //up\n\n              // If list isn't open, open it\n              if(!$scope.dropDownOpen) {\n                toggleDropDown();\n              }\n              else { // otherwise if the list is open move up in the highlights.\n                $scope.$apply(moveHighlightUp);\n              }\n              event.preventDefault();\n              break;\n\n            case 40: //down\n\n              //If list isn't open, open it\n              if(!$scope.dropDownOpen) {\n                toggleDropDown();\n              } else {\n                $scope.$apply(moveHighlightDown);\n              }\n              event.preventDefault();\n              break;\n          }\n        });\n\n        function moveHighlightDown() {\n          while($scope.tsDropDown.length-1>selectedIndex) {\n            selectedIndex++;\n            if( !$scope.tsDropDown[selectedIndex].hasOwnProperty('interactive') ||\n                $scope.tsDropDown[selectedIndex].interactive === true)\n              break;\n          }\n          $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n        }\n\n        function moveHighlightUp() {\n          while(0<selectedIndex) {\n            selectedIndex--;\n            if( !$scope.tsDropDown[selectedIndex].hasOwnProperty('interactive') ||\n                $scope.tsDropDown[selectedIndex].interactive === true)\n              break;\n          }\n          $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n        }\n\n\n        $scope.$watch('tsDropDown', function(){\n          if(angular.isArray($scope.tsDropDown)){\n            $scope.tsDropDown.forEach(function(dropDownItem) {\n\n              if($scope.listItemTransclude){\n                $scope.listItemTransclude($scope.$new(), function(clone, scope) {\n                  scope.item = dropDownItem;\n\n                  var listItem = ae(document.createElement('li'));\n                  listItem.attr('ng-class', '{\"highlighted\":highlightedItem==item}');\n                  var compiledListItem = $compile(listItem)(scope);\n                  compiledListItem.append(clone[0]);\n\n                  //Adds event handlers if the item isn't explicitly marked non interactive\n                  if( !dropDownItem.hasOwnProperty('interactive') ||\n                    dropDownItem.interactive === true) {\n                    compiledListItem.on('click', function() {\n                      updateSelected(dropDownItem);\n                      if($scope.tsItemClick)\n                        $scope.tsItemClick({item:dropDownItem});\n                      $scope.$apply(toggleDropDown);\n                    });\n                    compiledListItem.on('mouseenter', function(){\n                      $scope.highlightedItem = scope.item;\n                      selectedIndex = $scope.tsDropDown.indexOf(scope.item);\n                      $scope.$apply();\n                    });\n\n                  }\n\n                  compiledListItem[0].style.width = (scope.tsDropDownWidth || textDisplayElement[0].offsetWidth + dropDownArrow[0].offsetWidth) + 'px';\n\n                  dropDownUnorderedList.append(compiledListItem);\n                });\n              }\n            });\n          }\n\n\n        });\n\n\n        $scope.$watch('tsDropDownWidth', function(newVal){\n          if(newVal){\n            for (var i = 0; i < dropDownUnorderedList.children().length; i++) {\n              var child = dropDownUnorderedList.children()[i];\n              child.style.width = newVal + 'px';\n            }\n          }\n        });\n\n        //Initialize to first item is highlighted\n        $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n\n        if($scope.placeholderTransclude){\n          $scope.placeholderTransclude($scope.$new(), function(clone, scope){\n            placeholderScope = scope;\n            placeholderElement = clone[0];\n\n            textDisplayElement.append(clone[0]);\n          });\n        }\n\n        // Take the height of the window divided by 2 to get the middle of the window\n        // if the element's middle is lower than the middle of the window then open upward\n        // otherwise open downward\n        function toggleDropDown(forceState){\n          var rect = $element[0].getBoundingClientRect();\n          var middleOfWindow = window.innerHeight/2;\n          var middleOfElement = rect.top+rect.height/2;\n\n          if(middleOfElement>middleOfWindow){\n            $scope.direction = 'up';\n\n            dropDownListContainer[0].style.bottom = rect.height+'px';\n            dropDownListContainer[0].style.top = 'auto';\n          }\n          else{\n            dropDownListContainer[0].style.top = rect.height+'px';\n            dropDownListContainer[0].style.bottom = 'auto';\n            $scope.direction = 'down';\n          }\n\n\n          if(forceState === true || forceState === false) {\n            $scope.dropDownOpen = forceState;\n          }\n          else{\n            $scope.dropDownOpen = !$scope.dropDownOpen;\n            $scope.tsDropDownShow = $scope.dropDownOpen;\n          }\n          if(setHeight)\n            return;\n\n          $timeout( () => {\n            setHeight = true;\n            var dropdownHeight;\n            var listHeight = dropDownUnorderedList.outerHeight() + 2;\n            if(listHeight > (window.innerHeight * .33) )\n              dropdownHeight = window.innerHeight*.33;\n            else\n              dropdownHeight = listHeight\n            dropDownListContainer[0].style.height = dropdownHeight + 'px';\n          }, 0);\n        }\n\n        textDisplayElement.on('click', function(){\n          $scope.$apply(toggleDropDown)\n        });\n        dropDownArrow.on('click', function(){\n          $scope.$apply(toggleDropDown)\n        });\n\n\n        $scope.$watch('tsDropDownShow',function(newVal, oldVal) {\n          if(newVal !== undefined)\n            toggleDropDown(newVal);\n        })\n\n        if (!ngModelCtrl) return; // do nothing if no ng-model\n\n        function updateSelected(selectedValue){\n          placeholderScope.selectedItem = selectedItem = selectedValue;\n          $scope.$evalAsync(read);\n        }\n\n\n        $element.on('blur', function(){\n          $scope.$apply(function(){\n            $scope.dropDownOpen = false;\n          });\n        });\n\n        // Specify how UI should be updated when the model changes from outside\n        ngModelCtrl.$render = function() {\n          //update selected element text\n          updateSelected(ngModelCtrl.$viewValue || '');\n        };\n\n        // Write data to the model\n        function read() {\n          ngModelCtrl.$setViewValue(selectedItem);\n        }\n      }\n\n    };\n  })\n\n  .directive('tsPlaceholder', function(){\n    return {\n      restrict:'E',\n      require: '^tsDropDown',\n      transclude: 'element',\n      link: function(scope, iElem, iAttr, dropDownController, transclude){\n        dropDownController.setPlaceholder(transclude);\n      }\n    }\n  })\n\n  .directive('tsListItem', function(){\n    return {\n      restrict:'E',\n      require: '^tsDropDown',\n      transclude: 'element',\n      link: function(scope, iElem, iAttr, dropDownController, transclude){\n        dropDownController.setListItem(transclude);\n      }\n    }\n  });\n","(function(module) {\ntry {\n  module = angular.module('ts.utils');\n} catch (e) {\n  module = angular.module('ts.utils', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('templates/tsDropDown.html',\n    '<div class=\"drop-down-container\">\\n' +\n    '  <div class=\"selected-item-container\">\\n' +\n    '  </div><div class=\"arrow-container\" ng-class=\"{\\'arrow-default\\':!dropDownOpen, \\'arrow-open\\':dropDownOpen}\">\\n' +\n    '  </div>\\n' +\n    '  <div ng-show=\"dropDownOpen\"\\n' +\n    '       class=\"drop-down-list-container\">\\n' +\n    '    <ul>\\n' +\n    '    </ul>\\n' +\n    '  </div>\\n' +\n    '</div>');\n}]);\n})();\n","/**\n * autoGrow - Increases height of textarea while typing\n *\n * @note use with min-height, max-height and box-sizing:border-box\n *\n * @example\n * \t<textarea auto-grow></textarea>\n */\n angular.module('ts.utils').directive('autoGrow', function($timeout) {\n  return {\n    restrict: 'A',\n    link: function($scope, $element, $attrs) {\n      function grow() {\n        $element[0].style.height = 0; // autoshrink - need accurate scrollHeight\n        $element[0].style.height = $element[0].scrollHeight + 'px';\n      }\n      $element.on('input', grow);\n      $timeout(grow, true);\n    }\n  }\n});\n"],"sourceRoot":"/source/"}