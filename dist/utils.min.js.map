{"version":3,"sources":["utils.min.js","utils.js","uiEvent.js","truncate.js","tooltip.js","scrollOn.js","focusOn.js","dropDown.js","tsTooltip.js","autoGrow.js","tsDropDown.js"],"names":["angular","module","directive","$parse","priority","link","$scope","$elm","$attrs","events","$eval","uiEvent","forEach","eventName","fn","bind","evt","params","Array","prototype","slice","call","arguments","splice","$event","$params","$$phase","$apply","filter","value","wordLimit","ellipses","length","undefined","isNumber","words","split","join","$templateCache","$compile","$window","restrict","scope","tsTooltip","tsTooltipDirection","tsTooltipEvent","tsTooltipShow","controller","this","setTranscluded","transclude","transcludedContentFn","$element","$attr","offset","elem","docElem","win","rect","doc","getBoundingClientRect","width","height","getClientRects","ownerDocument","documentElement","top","pageYOffset","clientTop","left","pageXOffset","clientLeft","positionTooltip","elementOffset","leftCommon","origOffset","topCommon","direction","newTooltip","style","offsetHeight","tooltipMain","ARROW_SIZE","offsetWidth","makeVisible","isVisible","tooltipContainer","visibility","makeInvisible","toggleVisibility","template","get","eventType","children","$watch","find","addClass","document","body","insertBefore","childNodes","clone","append","tooltipScope","on","newVal","oldVal","$on","$destroy","remove","require","iElem","iAttr","tooltipController","$timeout","pre","scrollOn","event","location","scrollTop","scrollHeight","focusOnConfig","listener","noop","$observe","speed","parents","targetWindow","animate","complete","focus","extraOffset","focusOnOffset","parseInt","autoCenter","autoCenterInputs","tagName","toUpperCase","focusOnAutoCenter","window","innerHeight","clientHeight","$","provider","focusConfig","$get","tsDropDownTemplate","tsDropDown","tsDropDownWidth","tsItemClick","setPlaceholder","placeholderTransclude","setListItem","listItemTransclude","ngModelCtrl","moveHighlightDown","selectedIndex","hasOwnProperty","interactive","highlightedItem","moveHighlightUp","toggleDropDown","middleOfWindow","middleOfElement","dropDownListContainer","bottom","dropDownOpen","updateSelected","selectedValue","placeholderScope","selectedItem","$evalAsync","read","$setViewValue","ae","element","placeholderElement","attr","container","textDisplayElement","dropDownArrow","dropDownUnorderedList","querySelector","keyCode","preventDefault","isArray","dropDownItem","$new","item","listItem","createElement","compiledListItem","indexOf","i","child","$render","$viewValue","dropDownController","e","run","put","grow"],"mappings":"AAAA,YCAAA,SAAQC,OAAO,eCWfD,QAAQC,OAAO,YAAYC,UAAU,UAAW,SAAUC,QACtD,OACIC,SAAU,IACVC,KAAM,SAAUC,OAAQC,KAAMC,QAC1B,GAAIC,QAASH,OAAOI,MAAMF,OAAOG,QACjCX,SAAQY,QAAQH,OAAQ,SAAUE,QAASE,WACvC,GAAIC,IAAKX,OAAOQ,QAChBJ,MAAKQ,KAAKF,UAAW,SAAUG,KAC3B,GAAIC,QAASC,MAAMC,UAAUC,MAAMC,KAAKC,UAExCL,QAASA,OAAOM,OAAO,GACvBT,GAAGR,QAASkB,OAAQR,IAAKS,QAASR,SAC7BX,OAAOoB,SACRpB,OAAOqB,iBCX9B3B,QAAQC,OAAO,YAAY2B,OAAO,aAAc,WAC/C,MAAO,UAASC,MAAOC,WHuCrB,GGvCgCC,UAAQT,UAAAU,QAAA,GAAAC,SAAAX,UAAA,GAAG,IAAGA,UAAA,EAC9C,KAAKO,QAAU7B,QAAQkC,SAASJ,WAC9B,MAAOD,MAET,IAAIM,OAAQN,MAAMO,MAAM,IASxB,OAPID,OAAMH,OAASF,YACjBD,MAAQM,MAAMf,MAAM,EAAGU,WAAWO,KAAK,KAEnCN,WACFF,OAASE,WAGNF,SCPX7B,QAAQC,OAAO,YAEZC,UAAU,YAAa,SAASoC,eAAgBC,SAAUC,SAEzD,OACEC,SAAS,IACTC,OACEC,UAAU,IACVC,mBAAmB,IACnBC,eAAe,IACfC,cAAc,KAEhBC,WAAY,SAASzC,QACnB0C,KAAKC,eAAiB,SAASC,YAC7B5C,OAAO6C,qBAAuBD,aAGlC7C,KAAM,SAASC,OAAQ8C,SAAUC,OA8B/B,QAASC,QAAQC,MACf,GAAIC,SAASC,IAAKC,KAAMC,GAExB,IAAMJ,KAON,MAHAG,MAAOH,KAAKK,wBAGPF,KAAKG,OAASH,KAAKI,QAAUP,KAAKQ,iBAAiB/B,QACtD2B,IAAMJ,KAAKS,cACXP,IAAMjB,QACNgB,QAAUG,IAAIM,iBAGZC,IAAKR,KAAKQ,IAAMT,IAAIU,YAAcX,QAAQY,UAC1CC,KAAMX,KAAKW,KAAOZ,IAAIa,YAAcd,QAAQe,aAPhD,OAcF,QAASC,mBACP,GAAIC,eAAgBnB,OAAOF,SAAS,IAClCsB,WAAaD,cAAcJ,KAAKM,WAAWN,KAC3CO,UAAYH,cAAcP,IAAIS,WAAWT,GAG3C,QAAOW,WACL,IAAK,QACL,IAAK,OACHC,WAAWC,MAAMb,IAAMU,UAAaxB,SAAS,GAAG4B,aAAe1E,OAAO2E,YAAY,GAAGD,aAAa,EAAIE,WAAc,IACpH,MAAM,KACH,MACL,IAAK,SACHJ,WAAWC,MAAMV,KAAOK,WAAatB,SAAS,GAAG+B,YAAY,EAAI7E,OAAO2E,YAAY,GAAGE,YAAY,EAAI,KAK3G,OAAON,WACL,IAAK,QACHC,WAAWC,MAAMV,KAAOK,WAAatB,SAAS,GAAG+B,YAAYD,WAAa,IAC1E,MAAM,KACH,OACHJ,WAAWC,MAAMV,KAAOK,WAAYpE,OAAO2E,YAAY,GAAGE,YAAcD,WAAe,IACvF,MAAM,KACH,MACHJ,WAAWC,MAAMb,IAAMU,UAAYtE,OAAO2E,YAAY,GAAGD,aAAeE,WAAa,IACrF,MAAM,KACH,SACHJ,WAAWC,MAAMb,IAAMU,UAAYxB,SAAS,GAAG4B,aAAeE,WAAa,MAKjF,QAASE,eACHC,YACFb,kBACAa,WAAY,EACZC,iBAAiB,GAAGP,MAAMQ,WAAW,WAIzC,QAASC,iBACJH,YACDA,WAAY,EACZC,iBAAiB,GAAGP,MAAMQ,WAAa,UAI3C,QAASE,oBACJJ,UACDG,gBAGAJ,cA3GJ,GAAIF,YAAa,GACbQ,SAAWpD,eAAeqD,IAAI,4BAC9Bd,UAAYvE,OAAOsC,oBAAsB,QACzCgD,UAAYtF,OAAOuC,gBAAkB,aACrCwC,WAAY,EAEZC,iBAAmB/C,SAASmD,UAAUpF,OAC1CgF,kBAAiB,GAAGP,MAAMQ,WAAa,QAEvC,IAAIT,YAAaQ,iBAAiBO,WAAW,EAE7CvF,QAAOwF,OAAO,WAAW,MAAOhB,YAAWK,aAAcX,iBACzDlE,OAAOwF,OAAO,WAAW,MAAOhB,YAAWE,cAAeR,iBAC1DlE,OAAOwF,OAAO,WAAW,MAAO1C,UAAS,GAAGQ,wBAAwBM,KAAMM,iBAC1ElE,OAAOwF,OAAO,WAAW,MAAO1C,UAAS,GAAGQ,wBAAwBS,MAAOG,iBAE3ElE,OAAO2E,YAAcK,iBAAiBS,KAAK,gBAC3CzF,OAAO2E,YAAYe,SAASnB,WAE5BoB,SAASC,KAAKC,aAAab,iBAAiB,GAAGW,SAASC,KAAKE,WAAW,IACrE9F,OAAO6C,sBACR7C,OAAO6C,qBAAqB,SAASkD,MAAO3D,OAC1CpC,OAAO2E,YAAYqB,OAAOD,OAC1B/F,OAAOiG,aAAe7D,OA4B1B,IAAIiC,YAAarB,OAAOwB,WA4DxB,IAA2B7C,SAAxBoB,MAAMP,cACP,OAAO8C,WACL,IAAK,aACHxC,SAASoD,GAAG,aAAcpB,aAC1BhC,SAASoD,GAAG,aAAchB,cAC1B,MAAM,KACH,QACHpC,SAASoD,GAAG,QAASf,sBAKzBnF,QAAOwF,OAAO,gBAAgB,SAASW,OAAQC,QAC1CD,OACDrB,cAGAI,iBAMNlF,QAAOqG,IAAI,WAAW,WACjBrG,OAAOiG,cACRjG,OAAOiG,aAAaK,WACtB9B,WAAW+B,eAKlB3G,UAAU,mBAAoB,WAC7B,OACEuC,SAAS,IACTqE,QAAS,aACT5D,WAAY,UACZ7C,KAAM,SAASqC,MAAOqE,MAAOC,MAAOC,kBAAmB/D,YACrD+D,kBAAkBhE,eAAeC,gBC9KzClD,QAAQC,OAAO,YAAYC,UAAU,WAAY,SAASgH,UACxD,OACE7G,MACE8G,IAAK,SAAS7G,OAAQ8C,SAAU5C,QAC9BF,OAAOqG,IAAInG,OAAO4G,SAAU,SAASC,MAAOC,UAE1CJ,SAAS,WACU,WAAbI,SACFlE,SAAS,GAAGmE,UAAYnE,SAAS,GAAGoE,aAEhB,QAAbF,SACPlE,SAAS,GAAGmE,UAAY,EAGxBnE,SAAS,GAAGmE,UAAYD,WAEzB,UCEbtH,QAAQC,OAAO,YACZC,UAAU,UAAW,SAASsC,QAASiF,eACtC,OACEpH,KAAM,SAASC,OAAQ8C,SAAU5C,QAC/B,GAAIkH,UAAW1H,QAAQ2H,IACvBnH,QAAOoH,SAAS,UAAW,SAASnB,QAElCiB,WAEAA,SAAWpH,OAAOqG,IAAIF,OAAQ,SAASoB,OAGrC,GAFAA,MAAQA,OAAS,IAEdzE,SAAS0E,QAAQ,iBAAiB9F,OAAQ,CAC3C,GAAI+F,cAAe3E,SAAS0E,QAAQ,yBACpCC,cAAaC,SACXT,UAAWnE,SAASE,SAASY,IAAM6D,aAAazE,SAASY,IAAM6D,aAAaR,cAE5EM,MAAOA,MACPI,SAAU,WAER7E,SAAS,GAAG8E,eAIb,CACH,GAAI5E,QAASF,SAASE,SAASY,IAG3BiE,YAAcV,cAAcnE,MAGJrB,UAAzBzB,OAAO4H,gBACRD,YAAcE,SAAS7H,OAAO4H,iBAQ5BX,cAAca,YACdb,cAAcc,kBAAuD,SAAnCnF,SAAS,GAAGoF,QAAQC,eACtDhB,cAAcc,kBAAuD,YAAnCnF,SAAS,GAAGoF,QAAQC,gBAE1BxG,SAA3BzB,OAAOkI,mBACTlI,OAAOkI,mBAA+C,QAA1BlI,OAAOkI,kBACpCpF,OAASA,OAASqF,OAAOC,YAAY,EAAIxF,SAAS,GAAGyF,aAAa,EAGlEvF,QAAkB6E,YAGpBW,EAAE,QAAQd,SAAUT,UAAWjE,SAC7BuE,MAAOA,MACPI,SAAU,WAER7E,SAAS,GAAG8E,oBAU3Ba,SAAS,gBAAiB,WACzB,GAAIC,cACF1F,OAAQ,EACRgF,YAAW,EACXC,kBAAiB,EAGnBvF,MAAKsF,WAAa,SAASzG,OACzBmH,YAAYV,WAAazG,OAG3BmB,KAAKuF,iBAAmB,SAAS1G,OAC/BmH,YAAYT,iBAAmB1G,OAGjCmB,KAAKM,OAAS,SAASzB,OACrBmH,YAAY1F,OAASzB,OAGvBmB,KAAKiG,KAAO,WACV,MAAOD,gBCzGbhJ,QAAQC,OAAO,YAEZC,UAAU,aAAc,SAASoC,eAAgBC,UAEhD,OACEE,SAAS,IACTqE,QAAS,UAKTpE,OACEwG,mBAAmB,IACnBC,WAAY,IACZC,gBAAiB,IACjBC,YAAa,KAEftG,WAAY,SAASzC,QACnB0C,KAAKsG,eAAiB,SAASpG,YAC7B5C,OAAOiJ,sBAAwBrG,YAEjCF,KAAKwG,YAAc,SAAStG,YAC1B5C,OAAOmJ,mBAAqBvG,aAIhC7C,KAAM,SAASC,OAAQ8C,SAAUC,MAAOqG,aAuDtC,QAASC,qBACP,KAAMrJ,OAAO6I,WAAWnH,OAAO,EAAE4H,gBAC/BA,gBACKtJ,OAAO6I,WAAWS,eAAeC,eAAe,gBACjDvJ,OAAO6I,WAAWS,eAAeE,eAAgB,KAGvDxJ,OAAOyJ,gBAAkBzJ,OAAO6I,WAAWS,eAG7C,QAASI,mBACP,KAAQJ,cAAF,IACJA,gBACKtJ,OAAO6I,WAAWS,eAAeC,eAAe,gBACjDvJ,OAAO6I,WAAWS,eAAeE,eAAgB,KAGvDxJ,OAAOyJ,gBAAkBzJ,OAAO6I,WAAWS,eAsE7C,QAASK,kBACP,GAAIvG,MAAON,SAAS,GAAGQ,wBACnBsG,eAAiBvB,OAAOC,YAAY,EACpCuB,gBAAkBzG,KAAKQ,IAAIR,KAAKI,OAAO,CAExCqG,iBAAgBD,gBACjB5J,OAAOuE,UAAY,KAEnBuF,sBAAsB,GAAGrF,MAAMsF,OAAS3G,KAAKI,OAAO,KACpDsG,sBAAsB,GAAGrF,MAAMb,IAAM,SAGrCkG,sBAAsB,GAAGrF,MAAMb,IAAMR,KAAKI,OAAO,KACjDsG,sBAAsB,GAAGrF,MAAMsF,OAAS,OACxC/J,OAAOuE,UAAY,QAGrBvE,OAAOgK,cAAgBhK,OAAOgK,aAYhC,QAASC,gBAAeC,eACtBC,iBAAiBC,aAAeA,aAAeF,cAC/ClK,OAAOqK,WAAWC,MAiBpB,QAASA,QACPlB,YAAYmB,cAAcH,cA9L5B,GAAId,eAAgB,EAChBkB,GAAK9K,QAAQ+K,QACbC,mBAAkB/I,OAClBwI,iBAAgBxI,OAChByI,aAAYzI,MAGhBmB,UAAS6H,KAAK,WAAW,KAEzB3K,OAAOuE,UAAY,OACnBvE,OAAOgK,cAAe,CAEtB,IAAI5E,UAAWpD,eAAeqD,IAAI,6BAC9BuF,UAAY3I,SAASmD,UAAUpF,OACnC8C,UAASkD,OAAO4E,UAEhB,IAAIC,oBAAqBL,GAAGI,UAAUrF,WAAW,IAC/CuF,cAAgBN,GAAGI,UAAUrF,WAAW,IACxCuE,sBAAwBU,GAAGI,UAAUrF,WAAW,IAChDwF,sBAAwBP,GAAG1H,SAAS,GAAGkI,cAAc,MAEvDlI,UAASoD,GAAG,UAAW,SAASa,OAC9B,OAAOA,MAAMkE,SACX,IAAK,IACHhB,eAAejK,OAAOyJ,iBACtBE,iBACA5C,MAAMmE,gBACN,MAAM,KAEH,IAGClL,OAAOgK,aAIThK,OAAOqB,OAAOqI,iBAHdC,iBAKF5C,MAAMmE,gBACN,MAAM,KAEH,IAGClL,OAAOgK,aAGThK,OAAOqB,OAAOgI,mBAFdM,iBAIF5C,MAAMmE,oBA0BZlL,OAAOwF,OAAO,aAAc,WACvB9F,QAAQyL,QAAQnL,OAAO6I,aACxB7I,OAAO6I,WAAWvI,QAAQ,SAAS8K,cAE9BpL,OAAOmJ,oBACRnJ,OAAOmJ,mBAAmBnJ,OAAOqL,OAAQ,SAAStF,MAAO3D,OACvDA,MAAMkJ,KAAOF,YAEb,IAAIG,UAAWf,GAAG7E,SAAS6F,cAAc,MACzCD,UAASZ,KAAK,WAAY,wCAC1B,IAAIc,kBAAmBxJ,SAASsJ,UAAUnJ,MAC1CqJ,kBAAiBzF,OAAOD,MAAM,IAGzBqF,aAAa7B,eAAe,gBAC/B6B,aAAa5B,eAAgB,IAC7BiC,iBAAiBvF,GAAG,QAAS,WAC3B+D,eAAemB,cACZpL,OAAO+I,aACR/I,OAAO+I,aAAauC,KAAKF,eAC3BpL,OAAOqB,OAAOsI,kBAEhB8B,iBAAiBvF,GAAG,aAAc,WAChClG,OAAOyJ,gBAAkBrH,MAAMkJ,KAC/BhC,cAAgBtJ,OAAO6I,WAAW6C,QAAQtJ,MAAMkJ,MAChDtL,OAAOqB,YAKXoK,iBAAiB,GAAGhH,MAAMlB,OAAOnB,MAAM0G,iBAAkB+B,mBAAmB,GAAGhG,aAAc,KAE7FkG,sBAAsB/E,OAAOyF,wBAUvCzL,OAAOwF,OAAO,kBAAmB,SAASW,QACxC,GAAGA,OACD,IAAK,GAAIwF,GAAI,EAAGA,EAAIZ,sBAAsBxF,WAAW7D,OAAQiK,IAAK,CAChE,GAAIC,OAAQb,sBAAsBxF,WAAWoG,EAC7CC,OAAMnH,MAAMlB,MAAQ4C,OAAS,QAMnCnG,OAAOyJ,gBAAkBzJ,OAAO6I,WAAWS,eAExCtJ,OAAOiJ,uBACRjJ,OAAOiJ,sBAAsBjJ,OAAOqL,OAAQ,SAAStF,MAAO3D,OAC1D+H,iBAAmB/H,MACnBsI,mBAAqB3E,MAAM,GAE3B8E,mBAAmB7E,OAAOD,MAAM,MA2BpC8E,mBAAmB3E,GAAG,QAAS,WAC7BlG,OAAOqB,OAAOsI,kBAEhBmB,cAAc5E,GAAG,QAAS,WACxBlG,OAAOqB,OAAOsI,kBAGXP,cAQLtG,SAASoD,GAAG,OAAQ,WAClBlG,OAAOqB,OAAO,WACZrB,OAAOgK,cAAe,MAK1BZ,YAAYyC,QAAU,WAEpB5B,eAAeb,YAAY0C,YAAc,UAYhDlM,UAAU,gBAAiB,WAC1B,OACEuC,SAAS,IACTqE,QAAS,cACT5D,WAAY,UACZ7C,KAAM,SAASqC,MAAOqE,MAAOC,MAAOqF,mBAAoBnJ,YACtDmJ,mBAAmB/C,eAAepG,gBAKvChD,UAAU,aAAc,WACvB,OACEuC,SAAS,IACTqE,QAAS,cACT5D,WAAY,UACZ7C,KAAM,SAASqC,MAAOqE,MAAOC,MAAOqF,mBAAoBnJ,YACtDmJ,mBAAmB7C,YAAYtG,gBC5PvC,SAAUjD,QACV,IACEA,OAASD,QAAQC,OAAO,YACxB,MAAOqM,GACPrM,OAASD,QAAQC,OAAO,eAE1BA,OAAOsM,KAAK,iBAAkB,SAASjK,gBACrCA,eAAekK,IAAI,2BACjB,wLCAHxM,QAAQC,OAAO,YAAYC,UAAU,WAAY,SAASgH,UACzD,OACEzE,SAAU,IACVpC,KAAM,SAASC,OAAQ8C,SAAU5C,QAC/B,QAASiM,QACPrJ,SAAS,GAAG2B,MAAMjB,OAAS,EAC3BV,SAAS,GAAG2B,MAAMjB,OAASV,SAAS,GAAGoE,aAAe,KAExDpE,SAASoD,GAAG,QAASiG,MACrBvF,SAASuF,MAAM,OCjBrB,SAAUxM,QACV,IACEA,OAASD,QAAQC,OAAO,YACxB,MAAOqM,GACPrM,OAASD,QAAQC,OAAO,eAE1BA,OAAOsM,KAAK,iBAAkB,SAASjK,gBACrCA,eAAekK,IAAI,4BACjB","file":"utils.min.js","sourcesContent":["'use strict';\n\nangular.module('ts.utils', []);\n/**\n * @TODO remove in liue of ui-utils\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\n'use strict';\n\nangular.module('ts.utils').directive('uiEvent', function ($parse) {\n    return {\n        priority: 100,\n        link: function link($scope, $elm, $attrs) {\n            var events = $scope.$eval($attrs.uiEvent);\n            angular.forEach(events, function (uiEvent, eventName) {\n                var fn = $parse(uiEvent);\n                $elm.bind(eventName, function (evt) {\n                    var params = Array.prototype.slice.call(arguments);\n                    //Take out first paramater (event object);\n                    params = params.splice(1);\n                    fn($scope, { $event: evt, $params: params });\n                    if (!$scope.$$phase) {\n                        $scope.$apply();\n                    }\n                });\n            });\n        }\n    };\n});\n/**\n * truncate - Truncates a string by a specified number of words\n *\n * @example\n * \t<p>\n * \t\t{{::post.body | truncate : 35}}\n * \t\t<a ng-if=\"::post.body.split(' ').length>35\">Read More</a>\n * \t</p>\n *\n * @param {string} value  The string to be truncated\n * @param {int} [wordLimit] The number of words to truncate at. If falsey, doesn't truncate.\n * @param {string} [ellipses] The string to use as an ellipses. Default: '…' (&hellip;)\n */\n'use strict';\n\nangular.module('ts.utils').filter('tsTruncate', function () {\n  return function (value, wordLimit) {\n    var ellipses = arguments.length <= 2 || arguments[2] === undefined ? '…' : arguments[2];\n\n    if (!value || !angular.isNumber(wordLimit)) return value;\n\n    var words = value.split(' ');\n\n    if (words.length > wordLimit) {\n      value = words.slice(0, wordLimit).join(' ');\n\n      if (ellipses) value += ellipses;\n    }\n\n    return value;\n  };\n});\n/**\n * ts-tooltip - Shows a tooltip with an arrow pointing to the element the directive is applied to.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *<button\n *        ts-tooltip-event=\"click\"                              // Options are click or mouseover\n *        ts-tooltip=\"Something that shows up in there\"         // The text to show in the tooltip\n *        ts-tooltip-direction=\"bottom\"                         // The direction the tooltip pops up\n *        ts-tooltip-show=\"someModel.someBoolean\"               // A boolean if set will use this instead of events\n *        >\n *   Bottom Click Me\n * </button>\n *\n */\n\n'use strict';\n\nangular.module('ts.utils').directive('tsTooltip', function ($templateCache, $compile, $window) {\n\n  return {\n    restrict: 'A',\n    scope: {\n      tsTooltip: '@',\n      tsTooltipDirection: '@',\n      tsTooltipEvent: '@',\n      tsTooltipShow: '='\n    },\n    controller: function controller($scope) {\n      this.setTranscluded = function (transclude) {\n        $scope.transcludedContentFn = transclude;\n      };\n    },\n    link: function link($scope, $element, $attr) {\n      var ARROW_SIZE = 10;\n      var template = $templateCache.get('templates/tsTooltip.html');\n      var direction = $scope.tsTooltipDirection || 'right';\n      var eventType = $scope.tsTooltipEvent || 'mouseenter';\n      var isVisible = false;\n\n      var tooltipContainer = $compile(template)($scope);\n      tooltipContainer[0].style.visibility = 'hidden';\n\n      var newTooltip = tooltipContainer.children()[0];\n\n      $scope.$watch(function () {\n        return newTooltip.offsetWidth;\n      }, positionTooltip);\n      $scope.$watch(function () {\n        return newTooltip.offsetHeight;\n      }, positionTooltip);\n      $scope.$watch(function () {\n        return $element[0].getBoundingClientRect().top;\n      }, positionTooltip);\n      $scope.$watch(function () {\n        return $element[0].getBoundingClientRect().left;\n      }, positionTooltip);\n\n      $scope.tooltipMain = tooltipContainer.find(\"#tooltipMain\");\n      $scope.tooltipMain.addClass(direction);\n      // $element.after(tooltipContainer);\n      document.body.insertBefore(tooltipContainer[0], document.body.childNodes[0]);\n      if ($scope.transcludedContentFn) {\n        $scope.transcludedContentFn(function (clone, scope) {\n          $scope.tooltipMain.append(clone);\n          $scope.tooltipScope = scope;\n        });\n      }\n\n      // Taken from jQuery so we don't have to directly depend on it for this\n      // calculates the top left offsets for a given element.\n      function offset(elem) {\n        var docElem, win, rect, doc;\n\n        if (!elem) {\n          return;\n        }\n\n        rect = elem.getBoundingClientRect();\n\n        // Make sure element is not hidden (display: none) or disconnected\n        if (rect.width || rect.height || elem.getClientRects().length) {\n          doc = elem.ownerDocument;\n          win = $window;\n          docElem = doc.documentElement;\n\n          return {\n            top: rect.top + win.pageYOffset - docElem.clientTop,\n            left: rect.left + win.pageXOffset - docElem.clientLeft\n          };\n        }\n      }\n\n      var origOffset = offset(newTooltip);\n\n      function positionTooltip() {\n        var elementOffset = offset($element[0]),\n            leftCommon = elementOffset.left - origOffset.left,\n            topCommon = elementOffset.top - origOffset.top;\n\n        //Sets the common top for left and right, or common left for top and bottom\n        switch (direction) {\n          case 'right':\n          case 'left':\n            newTooltip.style.top = topCommon + $element[0].offsetHeight - $scope.tooltipMain[0].offsetHeight / 2 - ARROW_SIZE + 'px';\n            break;\n          case 'top':\n          case 'bottom':\n            newTooltip.style.left = leftCommon + $element[0].offsetWidth / 2 - $scope.tooltipMain[0].offsetWidth / 2 + 'px';\n            break;\n        }\n\n        //Sets the specific left or top values for each direction\n        switch (direction) {\n          case 'right':\n            newTooltip.style.left = leftCommon + $element[0].offsetWidth + ARROW_SIZE + 'px';\n            break;\n          case 'left':\n            newTooltip.style.left = leftCommon - $scope.tooltipMain[0].offsetWidth - ARROW_SIZE + 'px';\n            break;\n          case 'top':\n            newTooltip.style.top = topCommon - $scope.tooltipMain[0].offsetHeight - ARROW_SIZE + 'px';\n            break;\n          case 'bottom':\n            newTooltip.style.top = topCommon + $element[0].offsetHeight + ARROW_SIZE + 'px';\n            break;\n        }\n      }\n\n      function makeVisible() {\n        if (!isVisible) {\n          positionTooltip();\n          isVisible = true;\n          tooltipContainer[0].style.visibility = 'visible';\n        }\n      }\n\n      function makeInvisible() {\n        if (isVisible) {\n          isVisible = false;\n          tooltipContainer[0].style.visibility = 'hidden';\n        }\n      }\n\n      function toggleVisibility() {\n        if (isVisible) {\n          makeInvisible();\n        } else {\n          makeVisible();\n        }\n      }\n\n      if ($attr.tsTooltipShow === undefined) {\n        switch (eventType) {\n          case 'mouseenter':\n            $element.on('mouseenter', makeVisible);\n            $element.on('mouseleave', makeInvisible);\n            break;\n          case 'click':\n            $element.on('click', toggleVisibility);\n            break;\n        }\n      } else {\n        $scope.$watch('tsTooltipShow', function (newVal, oldVal) {\n          if (newVal) {\n            makeVisible();\n          } else {\n            makeInvisible();\n          }\n        });\n      }\n\n      //Clean up the tooltip and destroy the scope for the transcluded element\n      $scope.$on('$destroy', function () {\n        if ($scope.tooltipScope) $scope.tooltipScope.$destroy();\n        newTooltip.remove();\n      });\n    }\n  };\n}).directive('tsTooltipContent', function () {\n  return {\n    restrict: 'E',\n    require: '^tsTooltip',\n    transclude: 'element',\n    link: function link(scope, iElem, iAttr, tooltipController, transclude) {\n      tooltipController.setTranscluded(transclude);\n    }\n  };\n});\n\n/**\n * scrollOn - $broadcast()/$emit() a $scope event with the location to trigger scrolling\n *\n * @example\n *   <ul scroll-on=\"someEventName\" style=\"overflow: auto\">...</ul>\n *   ...\n *   var location = 'bottom';\n *   $scope.$broadcast('someEventName', location)\n *\n * @param location {'top'|'bottom'|offset} must be passed as event data\n */\n'use strict';\n\nangular.module('ts.utils').directive('scrollOn', function ($timeout) {\n  return {\n    link: {\n      pre: function pre($scope, $element, $attrs) {\n        $scope.$on($attrs.scrollOn, function (event, location) {\n          // let updates render\n          $timeout(function () {\n            if (location === 'bottom') {\n              $element[0].scrollTop = $element[0].scrollHeight;\n            } else if (location === 'top') {\n              $element[0].scrollTop = 0;\n            } else {\n              $element[0].scrollTop = location;\n            }\n          }, true);\n        });\n      }\n    }\n  };\n});\n/**\n * focusOn - Focuses an input on scope event\n *\n * @note depends on jQuery\n *\n * @example\n *   <input focus-on=\"someEventName\">\n *   or\n *   <input focus-on=\"focus-row-{{$index}}\">\n *   or\n *   <p focus-on=\"anotherEvent\"></p>\n *   ...\n *   $scope.$broadcast('someEventName');\n *   $scope.$broadcast('focus-row-2');\n *   $scope.$broadcast('anotherEvent');\n *\n *   focusOnConfigProvider - can be injected into a .config(function(focusOnConfigProvider){}) block to configure the\n *   app wide settings for the focusOn directive\n *\n *   Settings include:\n *      offset - number of pixels to offset the scroll to for a header or other info that appears above the element you\n *      want to scroll to the top of the screen.  The offset is subtracted from the computed scroll position\n *\n *      autoCenter - boolean if true will use the element height and document body height to scroll the element to the\n *      center of the screen instead of the top\n *\n *   App wide settings can be overridden using attributes along with the focus-on directive.  The attributes for the\n *   offset and autoCenter are focus-on-offset and focus-on-auto-center respectively.\n *\n */\n'use strict';\n\nangular.module('ts.utils').directive('focusOn', function ($window, focusOnConfig) {\n  return {\n    link: function link($scope, $element, $attrs) {\n      var listener = angular.noop;\n      $attrs.$observe('focusOn', function (newVal) {\n        // Stop listening to old event name\n        listener();\n        // Listen to new event name\n        listener = $scope.$on(newVal, function (speed) {\n          speed = speed || 1000;\n          // Center element on screen\n          if ($element.parents('.reveal-modal').length) {\n            var targetWindow = $element.parents('.reveal-modal .content');\n            targetWindow.animate({\n              scrollTop: $element.offset().top - targetWindow.offset().top + targetWindow.scrollTop()\n            }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          } else {\n            var offset = $element.offset().top;\n\n            // Use provider configured offset\n            var extraOffset = focusOnConfig.offset;\n\n            // If attribute is set override provider configured offset\n            if ($attrs.focusOnOffset !== undefined) {\n              extraOffset = parseInt($attrs.focusOnOffset);\n            }\n\n            // Check if provider or attribute set autoCenter/auto-center to true if so use offset/2 ignores the extra\n            // offset in this case\n            if ((focusOnConfig.autoCenter || focusOnConfig.autoCenterInputs && $element[0].tagName.toUpperCase() == 'INPUT' || focusOnConfig.autoCenterInputs && $element[0].tagName.toUpperCase() == 'TEXTAREA') && $attrs.focusOnAutoCenter === undefined || $attrs.focusOnAutoCenter && $attrs.focusOnAutoCenter == 'true') {\n              offset = offset - window.innerHeight / 2 - $element[0].clientHeight / 2;\n            } else {\n              offset = offset - extraOffset;\n            }\n\n            $('body').animate({ scrollTop: offset }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n}).provider('focusOnConfig', function () {\n  var focusConfig = {\n    offset: 0,\n    autoCenter: false,\n    autoCenterInputs: false\n  };\n\n  this.autoCenter = function (value) {\n    focusConfig.autoCenter = value;\n  };\n\n  this.autoCenterInputs = function (value) {\n    focusConfig.autoCenterInputs = value;\n  };\n\n  this.offset = function (value) {\n    focusConfig.offset = value;\n  };\n\n  this.$get = function () {\n    return focusConfig;\n  };\n});\n/**\n * ts-dropwdown - Shows a drop down list of items that can be selected from.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *\n */\n\n'use strict';\nangular.module('ts.utils').directive('tsDropDown', function ($templateCache, $compile) {\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    //transclude: {\n    //  'listItem':'tsListItem',\n    //  'placeholder':'tsPlaceholder'\n    //},\n    scope: {\n      tsDropDownTemplate: '@',\n      tsDropDown: '=',\n      tsDropDownWidth: '=',\n      tsItemClick: '&'\n    },\n    controller: function controller($scope) {\n      this.setPlaceholder = function (transclude) {\n        $scope.placeholderTransclude = transclude;\n      };\n      this.setListItem = function (transclude) {\n        $scope.listItemTransclude = transclude;\n      };\n    },\n\n    link: function link($scope, $element, $attr, ngModelCtrl) {\n      var selectedIndex = 0,\n          ae = angular.element,\n          //shorthand\n      placeholderElement = undefined,\n          placeholderScope = undefined,\n          selectedItem = undefined;\n\n      //Makes the element focusable with the keyboard\n      $element.attr('tabindex', '0');\n\n      $scope.direction = 'down';\n      $scope.dropDownOpen = false;\n\n      var template = $templateCache.get('templates/tsDropDown.html');\n      var container = $compile(template)($scope); //Container for all the drop down related parts\n      $element.append(container);\n\n      var textDisplayElement = ae(container.children()[0]),\n          //First child of the container is the place to put the placeholder or selected item\n      dropDownArrow = ae(container.children()[1]),\n          //Second child is the drop down arrow/button\n      dropDownListContainer = ae(container.children()[2]),\n          //Third child is the list container\n      dropDownUnorderedList = ae($element[0].querySelector('ul'));\n\n      $element.on('keydown', function (event) {\n        switch (event.keyCode) {\n          case 13:\n            //enter\n            updateSelected($scope.highlightedItem);\n            toggleDropDown();\n            event.preventDefault();\n            break;\n\n          case 38:\n            //up\n\n            // If list isn't open, open it\n            if (!$scope.dropDownOpen) {\n              toggleDropDown();\n            } else {\n              // otherwise if the list is open move up in the highlights.\n              $scope.$apply(moveHighlightUp);\n            }\n            event.preventDefault();\n            break;\n\n          case 40:\n            //down\n\n            //If list isn't open, open it\n            if (!$scope.dropDownOpen) {\n              toggleDropDown();\n            } else {\n              $scope.$apply(moveHighlightDown);\n            }\n            event.preventDefault();\n            break;\n        }\n      });\n\n      function moveHighlightDown() {\n        while ($scope.tsDropDown.length - 1 > selectedIndex) {\n          selectedIndex++;\n          if (!$scope.tsDropDown[selectedIndex].hasOwnProperty('interactive') || $scope.tsDropDown[selectedIndex].interactive === true) break;\n        }\n        $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n      }\n\n      function moveHighlightUp() {\n        while (0 < selectedIndex) {\n          selectedIndex--;\n          if (!$scope.tsDropDown[selectedIndex].hasOwnProperty('interactive') || $scope.tsDropDown[selectedIndex].interactive === true) break;\n        }\n        $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n      }\n\n      $scope.$watch('tsDropDown', function () {\n        if (angular.isArray($scope.tsDropDown)) {\n          $scope.tsDropDown.forEach(function (dropDownItem) {\n\n            if ($scope.listItemTransclude) {\n              $scope.listItemTransclude($scope.$new(), function (clone, scope) {\n                scope.item = dropDownItem;\n\n                var listItem = ae(document.createElement('li'));\n                listItem.attr('ng-class', '{\"highlighted\":highlightedItem==item}');\n                var compiledListItem = $compile(listItem)(scope);\n                compiledListItem.append(clone[0]);\n\n                //Adds event handlers if the item isn't explicitly marked non interactive\n                if (!dropDownItem.hasOwnProperty('interactive') || dropDownItem.interactive === true) {\n                  compiledListItem.on('click', function () {\n                    updateSelected(dropDownItem);\n                    if ($scope.tsItemClick) $scope.tsItemClick({ item: dropDownItem });\n                    $scope.$apply(toggleDropDown);\n                  });\n                  compiledListItem.on('mouseenter', function () {\n                    $scope.highlightedItem = scope.item;\n                    selectedIndex = $scope.tsDropDown.indexOf(scope.item);\n                    $scope.$apply();\n                  });\n                }\n\n                compiledListItem[0].style.width = (scope.tsDropDownWidth || textDisplayElement[0].offsetWidth) + 'px';\n\n                dropDownUnorderedList.append(compiledListItem);\n              });\n            }\n          });\n        }\n      });\n\n      $scope.$watch('tsDropDownWidth', function (newVal) {\n        if (newVal) {\n          for (var i = 0; i < dropDownUnorderedList.children().length; i++) {\n            var child = dropDownUnorderedList.children()[i];\n            child.style.width = newVal + 'px';\n          }\n        }\n      });\n\n      //Initialize to first item is highlighted\n      $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n\n      if ($scope.placeholderTransclude) {\n        $scope.placeholderTransclude($scope.$new(), function (clone, scope) {\n          placeholderScope = scope;\n          placeholderElement = clone[0];\n\n          textDisplayElement.append(clone[0]);\n        });\n      }\n\n      // Take the height of the window divided by 2 to get the middle of the window\n      // if the element's middle is lower than the middle of the window then open upward\n      // otherwise open downward\n      function toggleDropDown() {\n        var rect = $element[0].getBoundingClientRect();\n        var middleOfWindow = window.innerHeight / 2;\n        var middleOfElement = rect.top + rect.height / 2;\n\n        if (middleOfElement > middleOfWindow) {\n          $scope.direction = 'up';\n\n          dropDownListContainer[0].style.bottom = rect.height + 'px';\n          dropDownListContainer[0].style.top = 'auto';\n        } else {\n          dropDownListContainer[0].style.top = rect.height + 'px';\n          dropDownListContainer[0].style.bottom = 'auto';\n          $scope.direction = 'down';\n        }\n\n        $scope.dropDownOpen = !$scope.dropDownOpen;\n      }\n\n      textDisplayElement.on('click', function () {\n        $scope.$apply(toggleDropDown);\n      });\n      dropDownArrow.on('click', function () {\n        $scope.$apply(toggleDropDown);\n      });\n\n      if (!ngModelCtrl) return; // do nothing if no ng-model\n\n      function updateSelected(selectedValue) {\n        placeholderScope.selectedItem = selectedItem = selectedValue;\n        $scope.$evalAsync(read);\n      }\n\n      $element.on('blur', function () {\n        $scope.$apply(function () {\n          $scope.dropDownOpen = false;\n        });\n      });\n\n      // Specify how UI should be updated when the model changes from outside\n      ngModelCtrl.$render = function () {\n        //update selected element text\n        updateSelected(ngModelCtrl.$viewValue || '');\n      };\n\n      // Write data to the model\n      function read() {\n        ngModelCtrl.$setViewValue(selectedItem);\n      }\n    }\n\n  };\n}).directive('tsPlaceholder', function () {\n  return {\n    restrict: 'E',\n    require: '^tsDropDown',\n    transclude: 'element',\n    link: function link(scope, iElem, iAttr, dropDownController, transclude) {\n      dropDownController.setPlaceholder(transclude);\n    }\n  };\n}).directive('tsListItem', function () {\n  return {\n    restrict: 'E',\n    require: '^tsDropDown',\n    transclude: 'element',\n    link: function link(scope, iElem, iAttr, dropDownController, transclude) {\n      dropDownController.setListItem(transclude);\n    }\n  };\n});\n'use strict';\n\n(function (module) {\n  try {\n    module = angular.module('ts.utils');\n  } catch (e) {\n    module = angular.module('ts.utils', []);\n  }\n  module.run(['$templateCache', function ($templateCache) {\n    $templateCache.put('templates/tsTooltip.html', '<div class=\"ts-tooltip-container\">\\n' + '  <div class=\"arrow-box-container\">\\n' + '    <div id=\"tooltipMain\" class=\"ts-tooltip-main\">\\n' + '      {{tsTooltip}}\\n' + '    </div>\\n' + '  </div>\\n' + '</div>');\n  }]);\n})();\n/**\n * autoGrow - Increases height of textarea while typing\n *\n * @note use with min-height, max-height and box-sizing:border-box\n *\n * @example\n * \t<textarea auto-grow></textarea>\n */\n'use strict';\n\nangular.module('ts.utils').directive('autoGrow', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link($scope, $element, $attrs) {\n      function grow() {\n        $element[0].style.height = 0; // autoshrink - need accurate scrollHeight\n        $element[0].style.height = $element[0].scrollHeight + 'px';\n      }\n      $element.on('input', grow);\n      $timeout(grow, true);\n    }\n  };\n});\n'use strict';\n\n(function (module) {\n  try {\n    module = angular.module('ts.utils');\n  } catch (e) {\n    module = angular.module('ts.utils', []);\n  }\n  module.run(['$templateCache', function ($templateCache) {\n    $templateCache.put('templates/tsDropDown.html', '<div class=\"drop-down-container\">\\n' + '  <div class=\"selected-item-container\">\\n' + '  </div><div class=\"arrow-container\" ng-class=\"{\\'arrow-default\\':!dropDownOpen, \\'arrow-open\\':dropDownOpen}\">\\n' + '  </div>\\n' + '  <div ng-show=\"dropDownOpen\"\\n' + '       class=\"drop-down-list-container\">\\n' + '    <ul>\\n' + '    </ul>\\n' + '  </div>\\n' + '</div>');\n  }]);\n})();","angular.module('ts.utils', []);\n","/**\n * @TODO remove in liue of ui-utils\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\nangular.module('ts.utils').directive('uiEvent', function ($parse) {\n    return {\n        priority: 100,\n        link: function ($scope, $elm, $attrs) {\n            var events = $scope.$eval($attrs.uiEvent);\n            angular.forEach(events, function (uiEvent, eventName) {\n                var fn = $parse(uiEvent);\n                $elm.bind(eventName, function (evt) {\n                    var params = Array.prototype.slice.call(arguments);\n                    //Take out first paramater (event object);\n                    params = params.splice(1);\n                    fn($scope, {$event: evt, $params: params});\n                    if (!$scope.$$phase) {\n                        $scope.$apply();\n                    }\n                });\n            });\n        }\n    };\n});\n","/**\n * truncate - Truncates a string by a specified number of words\n *\n * @example\n * \t<p>\n * \t\t{{::post.body | truncate : 35}}\n * \t\t<a ng-if=\"::post.body.split(' ').length>35\">Read More</a>\n * \t</p>\n *\n * @param {string} value  The string to be truncated\n * @param {int} [wordLimit] The number of words to truncate at. If falsey, doesn't truncate.\n * @param {string} [ellipses] The string to use as an ellipses. Default: '…' (&hellip;)\n */\n angular.module('ts.utils').filter('tsTruncate', function() {\n  return function(value, wordLimit, ellipses = '…'){\n    if (!value || !angular.isNumber(wordLimit))\n      return value;\n\n    var words = value.split(' ');\n\n    if (words.length > wordLimit) {\n      value = words.slice(0, wordLimit).join(' ');\n\n      if (ellipses)\n        value += ellipses;\n    }\n\n    return value;\n  }\n});\n","/**\n * ts-tooltip - Shows a tooltip with an arrow pointing to the element the directive is applied to.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *<button\n *        ts-tooltip-event=\"click\"                              // Options are click or mouseover\n *        ts-tooltip=\"Something that shows up in there\"         // The text to show in the tooltip\n *        ts-tooltip-direction=\"bottom\"                         // The direction the tooltip pops up\n *        ts-tooltip-show=\"someModel.someBoolean\"               // A boolean if set will use this instead of events\n *        >\n *   Bottom Click Me\n * </button>\n *\n */\n\n'use strict';\n\nangular.module('ts.utils')\n\n  .directive('tsTooltip', function($templateCache, $compile, $window){\n\n    return {\n      restrict:'A',\n      scope:{\n        tsTooltip:'@',\n        tsTooltipDirection:'@',\n        tsTooltipEvent:'@',\n        tsTooltipShow:'='\n      },\n      controller: function($scope){\n        this.setTranscluded = function(transclude){\n          $scope.transcludedContentFn = transclude;\n        }\n      },\n      link: function($scope, $element, $attr) {\n        var ARROW_SIZE = 10;\n        var template = $templateCache.get('templates/tsTooltip.html');\n        var direction = $scope.tsTooltipDirection || 'right';\n        var eventType = $scope.tsTooltipEvent || 'mouseenter';\n        var isVisible = false;\n\n        var tooltipContainer = $compile(template)($scope);\n        tooltipContainer[0].style.visibility = 'hidden';\n\n        var newTooltip = tooltipContainer.children()[0];\n\n        $scope.$watch(function(){return newTooltip.offsetWidth}, positionTooltip);\n        $scope.$watch(function(){return newTooltip.offsetHeight}, positionTooltip);\n        $scope.$watch(function(){return $element[0].getBoundingClientRect().top}, positionTooltip);\n        $scope.$watch(function(){return $element[0].getBoundingClientRect().left}, positionTooltip);\n\n        $scope.tooltipMain = tooltipContainer.find(\"#tooltipMain\");\n        $scope.tooltipMain.addClass(direction);\n        // $element.after(tooltipContainer);\n        document.body.insertBefore(tooltipContainer[0],document.body.childNodes[0]);\n        if($scope.transcludedContentFn){\n          $scope.transcludedContentFn(function(clone, scope) {\n            $scope.tooltipMain.append(clone);\n            $scope.tooltipScope = scope;\n          });\n        }\n\n        // Taken from jQuery so we don't have to directly depend on it for this\n        // calculates the top left offsets for a given element.\n        function offset( elem ) {\n          var docElem, win, rect, doc;\n\n          if ( !elem ) {\n            return;\n          }\n\n          rect = elem.getBoundingClientRect();\n\n          // Make sure element is not hidden (display: none) or disconnected\n          if ( rect.width || rect.height || elem.getClientRects().length ) {\n            doc = elem.ownerDocument;\n            win = $window;\n            docElem = doc.documentElement;\n\n            return {\n              top: rect.top + win.pageYOffset - docElem.clientTop,\n              left: rect.left + win.pageXOffset - docElem.clientLeft\n            };\n          }\n        }\n\n        var origOffset = offset(newTooltip);\n\n        function positionTooltip(){\n          let elementOffset = offset($element[0]),\n            leftCommon = elementOffset.left-origOffset.left,\n            topCommon = elementOffset.top-origOffset.top;\n\n          //Sets the common top for left and right, or common left for top and bottom\n          switch(direction){\n            case 'right':\n            case 'left':\n              newTooltip.style.top = (topCommon + $element[0].offsetHeight - $scope.tooltipMain[0].offsetHeight/2 - ARROW_SIZE) + 'px';\n              break;\n            case 'top':\n            case 'bottom':\n              newTooltip.style.left = leftCommon + $element[0].offsetWidth/2 - $scope.tooltipMain[0].offsetWidth/2 + 'px';\n              break;\n          }\n\n          //Sets the specific left or top values for each direction\n          switch(direction) {\n            case 'right':\n              newTooltip.style.left = leftCommon + $element[0].offsetWidth+ARROW_SIZE + 'px';\n              break;\n            case 'left':\n              newTooltip.style.left = (leftCommon-$scope.tooltipMain[0].offsetWidth - ARROW_SIZE ) + 'px';\n              break;\n            case 'top':\n              newTooltip.style.top = topCommon - $scope.tooltipMain[0].offsetHeight - ARROW_SIZE + 'px';\n              break;\n            case 'bottom':\n              newTooltip.style.top = topCommon + $element[0].offsetHeight + ARROW_SIZE + 'px';\n              break;\n          }\n        }\n\n        function makeVisible(){\n          if(!isVisible){\n            positionTooltip();\n            isVisible = true;\n            tooltipContainer[0].style.visibility='visible';\n          }\n        }\n\n        function makeInvisible() {\n          if(isVisible){\n            isVisible = false;\n            tooltipContainer[0].style.visibility = 'hidden';\n          }\n        }\n\n        function toggleVisibility(){\n          if(isVisible) {\n            makeInvisible();\n          }\n          else {\n            makeVisible();\n          }\n        }\n\n        if($attr.tsTooltipShow === undefined) {\n          switch(eventType) {\n            case 'mouseenter':\n              $element.on('mouseenter', makeVisible);\n              $element.on('mouseleave', makeInvisible);\n              break;\n            case 'click':\n              $element.on('click', toggleVisibility);\n              break;\n          }\n        }\n        else{\n          $scope.$watch('tsTooltipShow',function(newVal, oldVal) {\n            if(newVal) {\n              makeVisible();\n            }\n            else {\n              makeInvisible();\n            }\n          })\n        }\n\n        //Clean up the tooltip and destroy the scope for the transcluded element\n        $scope.$on('$destroy',function() {\n          if($scope.tooltipScope)\n            $scope.tooltipScope.$destroy();\n          newTooltip.remove();\n        });\n      }\n    };\n  })\n  .directive('tsTooltipContent', function(){\n    return {\n      restrict:'E',\n      require: '^tsTooltip',\n      transclude: 'element',\n      link: function(scope, iElem, iAttr, tooltipController, transclude){\n        tooltipController.setTranscluded(transclude);\n      }\n    }\n  })\n;\n","\n/**\n * scrollOn - $broadcast()/$emit() a $scope event with the location to trigger scrolling\n *\n * @example\n *   <ul scroll-on=\"someEventName\" style=\"overflow: auto\">...</ul>\n *   ...\n *   var location = 'bottom';\n *   $scope.$broadcast('someEventName', location)\n *\n * @param location {'top'|'bottom'|offset} must be passed as event data\n */\nangular.module('ts.utils').directive('scrollOn', function($timeout) {\n  return {\n    link: {\n      pre: function($scope, $element, $attrs) {\n        $scope.$on($attrs.scrollOn, function(event, location){\n          // let updates render\n          $timeout(function(){\n            if (location === 'bottom') {\n              $element[0].scrollTop = $element[0].scrollHeight;\n            }\n            else if (location === 'top') {\n              $element[0].scrollTop = 0;\n            }\n            else {\n              $element[0].scrollTop = location;\n            }\n          }, true);\n        });\n      }\n    }\n  };\n});\n","/**\n * focusOn - Focuses an input on scope event\n *\n * @note depends on jQuery\n *\n * @example\n *   <input focus-on=\"someEventName\">\n *   or\n *   <input focus-on=\"focus-row-{{$index}}\">\n *   or\n *   <p focus-on=\"anotherEvent\"></p>\n *   ...\n *   $scope.$broadcast('someEventName');\n *   $scope.$broadcast('focus-row-2');\n *   $scope.$broadcast('anotherEvent');\n *\n *   focusOnConfigProvider - can be injected into a .config(function(focusOnConfigProvider){}) block to configure the\n *   app wide settings for the focusOn directive\n *\n *   Settings include:\n *      offset - number of pixels to offset the scroll to for a header or other info that appears above the element you\n *      want to scroll to the top of the screen.  The offset is subtracted from the computed scroll position\n *\n *      autoCenter - boolean if true will use the element height and document body height to scroll the element to the\n *      center of the screen instead of the top\n *\n *   App wide settings can be overridden using attributes along with the focus-on directive.  The attributes for the\n *   offset and autoCenter are focus-on-offset and focus-on-auto-center respectively.\n *\n */\nangular.module('ts.utils')\n  .directive('focusOn', function($window, focusOnConfig){\n    return {\n      link: function($scope, $element, $attrs) {\n        var listener = angular.noop;\n        $attrs.$observe('focusOn', function(newVal){\n          // Stop listening to old event name\n          listener();\n          // Listen to new event name\n          listener = $scope.$on(newVal, function(speed){\n            speed = speed || 1000;\n            // Center element on screen\n            if($element.parents('.reveal-modal').length) {\n              var targetWindow = $element.parents('.reveal-modal .content');\n              targetWindow.animate({\n                scrollTop: $element.offset().top - targetWindow.offset().top + targetWindow.scrollTop()\n              }, {\n                speed: speed,\n                complete: function complete() {\n                  // Focus element (if input)\n                  $element[0].focus();\n                }\n              });\n            }\n            else {\n              var offset = $element.offset().top;\n\n              // Use provider configured offset\n              var extraOffset = focusOnConfig.offset;\n\n              // If attribute is set override provider configured offset\n              if($attrs.focusOnOffset !== undefined){\n                extraOffset = parseInt($attrs.focusOnOffset);\n              }\n\n              // Check if provider or attribute set autoCenter/auto-center to true if so use offset/2 ignores the extra\n              // offset in this case\n              if(\n                (\n                (\n                  focusOnConfig.autoCenter ||\n                  focusOnConfig.autoCenterInputs && $element[0].tagName.toUpperCase()=='INPUT' ||\n                  focusOnConfig.autoCenterInputs && $element[0].tagName.toUpperCase()=='TEXTAREA'\n                )\n                && $attrs.focusOnAutoCenter===undefined ) ||\n                ($attrs.focusOnAutoCenter && $attrs.focusOnAutoCenter=='true') ) {\n                offset = offset - window.innerHeight/2 - $element[0].clientHeight/2;\n              }\n              else{\n                offset = offset - extraOffset;\n              }\n\n              $('body').animate({ scrollTop: offset }, {\n                speed: speed,\n                complete: function complete() {\n                  // Focus element (if input)\n                  $element[0].focus();\n                }\n              });\n            }\n          });\n        });\n      }\n    };\n  })\n\n  .provider('focusOnConfig', function(){\n    var focusConfig = {\n      offset: 0,\n      autoCenter:false,\n      autoCenterInputs:false\n    };\n\n    this.autoCenter = function(value){\n      focusConfig.autoCenter = value;\n    };\n\n    this.autoCenterInputs = function(value){\n      focusConfig.autoCenterInputs = value;\n    };\n\n    this.offset = function(value){\n      focusConfig.offset = value;\n    };\n\n    this.$get = function(){\n      return focusConfig;\n    };\n\n  });","/**\n * ts-dropwdown - Shows a drop down list of items that can be selected from.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *\n */\n\n'use strict';\nangular.module('ts.utils')\n\n  .directive('tsDropDown', function($templateCache, $compile) {\n\n    return {\n      restrict:'A',\n      require: 'ngModel',\n      //transclude: {\n      //  'listItem':'tsListItem',\n      //  'placeholder':'tsPlaceholder'\n      //},\n      scope:{\n        tsDropDownTemplate:'@',\n        tsDropDown: '=',\n        tsDropDownWidth: '=',\n        tsItemClick: '&'\n      },\n      controller: function($scope){\n        this.setPlaceholder = function(transclude){\n          $scope.placeholderTransclude = transclude;\n        }\n        this.setListItem = function(transclude){\n          $scope.listItemTransclude = transclude;\n        }\n      },\n\n      link: function($scope, $element, $attr, ngModelCtrl) {\n        let selectedIndex = 0,\n            ae = angular.element, //shorthand\n            placeholderElement,\n            placeholderScope,\n            selectedItem;\n\n        //Makes the element focusable with the keyboard\n        $element.attr('tabindex','0');\n\n        $scope.direction = 'down';\n        $scope.dropDownOpen = false;\n\n        var template = $templateCache.get('templates/tsDropDown.html');\n        var container = $compile(template)($scope); //Container for all the drop down related parts\n        $element.append(container);\n\n        let textDisplayElement = ae(container.children()[0]), //First child of the container is the place to put the placeholder or selected item\n          dropDownArrow = ae(container.children()[1]), //Second child is the drop down arrow/button\n          dropDownListContainer = ae(container.children()[2]), //Third child is the list container\n          dropDownUnorderedList = ae($element[0].querySelector('ul'))\n\n        $element.on('keydown', function(event) {\n          switch(event.keyCode){\n            case 13: //enter\n              updateSelected($scope.highlightedItem);\n              toggleDropDown();\n              event.preventDefault();\n              break;\n\n            case 38: //up\n\n              // If list isn't open, open it\n              if(!$scope.dropDownOpen) {\n                toggleDropDown();\n              }\n              else { // otherwise if the list is open move up in the highlights.\n                $scope.$apply(moveHighlightUp);\n              }\n              event.preventDefault();\n              break;\n\n            case 40: //down\n\n              //If list isn't open, open it\n              if(!$scope.dropDownOpen) {\n                toggleDropDown();\n              } else {\n                $scope.$apply(moveHighlightDown);\n              }\n              event.preventDefault();\n              break;\n          }\n        });\n\n        function moveHighlightDown() {\n          while($scope.tsDropDown.length-1>selectedIndex) {\n            selectedIndex++;\n            if( !$scope.tsDropDown[selectedIndex].hasOwnProperty('interactive') ||\n                $scope.tsDropDown[selectedIndex].interactive === true)\n              break;\n          }\n          $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n        }\n\n        function moveHighlightUp() {\n          while(0<selectedIndex) {\n            selectedIndex--;\n            if( !$scope.tsDropDown[selectedIndex].hasOwnProperty('interactive') ||\n                $scope.tsDropDown[selectedIndex].interactive === true)\n              break;\n          }\n          $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n        }\n\n\n        $scope.$watch('tsDropDown', function(){\n          if(angular.isArray($scope.tsDropDown)){\n            $scope.tsDropDown.forEach(function(dropDownItem) {\n\n              if($scope.listItemTransclude){\n                $scope.listItemTransclude($scope.$new(), function(clone, scope) {\n                  scope.item = dropDownItem;\n\n                  var listItem = ae(document.createElement('li'));\n                  listItem.attr('ng-class', '{\"highlighted\":highlightedItem==item}');\n                  var compiledListItem = $compile(listItem)(scope);\n                  compiledListItem.append(clone[0]);\n\n                  //Adds event handlers if the item isn't explicitly marked non interactive\n                  if( !dropDownItem.hasOwnProperty('interactive') ||\n                    dropDownItem.interactive === true) {\n                    compiledListItem.on('click', function() {\n                      updateSelected(dropDownItem);\n                      if($scope.tsItemClick)\n                        $scope.tsItemClick({item:dropDownItem});\n                      $scope.$apply(toggleDropDown);\n                    });\n                    compiledListItem.on('mouseenter', function(){\n                      $scope.highlightedItem = scope.item;\n                      selectedIndex = $scope.tsDropDown.indexOf(scope.item);\n                      $scope.$apply();\n                    });\n\n                  }\n\n                  compiledListItem[0].style.width=(scope.tsDropDownWidth||(textDisplayElement[0].offsetWidth))+'px';\n\n                  dropDownUnorderedList.append(compiledListItem);\n                });\n              }\n            });\n          }\n\n\n        });\n\n\n        $scope.$watch('tsDropDownWidth', function(newVal){\n          if(newVal){\n            for (var i = 0; i < dropDownUnorderedList.children().length; i++) {\n              var child = dropDownUnorderedList.children()[i];\n              child.style.width = newVal + 'px';\n            }\n          }\n        });\n\n        //Initialize to first item is highlighted\n        $scope.highlightedItem = $scope.tsDropDown[selectedIndex];\n\n        if($scope.placeholderTransclude){\n          $scope.placeholderTransclude($scope.$new(), function(clone, scope){\n            placeholderScope = scope;\n            placeholderElement = clone[0];\n\n            textDisplayElement.append(clone[0]);\n          });\n        }\n\n        // Take the height of the window divided by 2 to get the middle of the window\n        // if the element's middle is lower than the middle of the window then open upward\n        // otherwise open downward\n        function toggleDropDown(){\n          var rect = $element[0].getBoundingClientRect();\n          var middleOfWindow = window.innerHeight/2;\n          var middleOfElement = rect.top+rect.height/2;\n\n          if(middleOfElement>middleOfWindow){\n            $scope.direction = 'up';\n\n            dropDownListContainer[0].style.bottom = rect.height+'px';\n            dropDownListContainer[0].style.top = 'auto';\n          }\n          else{\n            dropDownListContainer[0].style.top = rect.height+'px';\n            dropDownListContainer[0].style.bottom = 'auto';\n            $scope.direction = 'down';\n          }\n\n          $scope.dropDownOpen = !$scope.dropDownOpen;\n        }\n\n        textDisplayElement.on('click', function(){\n          $scope.$apply(toggleDropDown)\n        });\n        dropDownArrow.on('click', function(){\n          $scope.$apply(toggleDropDown)\n        });\n\n        if (!ngModelCtrl) return; // do nothing if no ng-model\n\n        function updateSelected(selectedValue){\n          placeholderScope.selectedItem = selectedItem = selectedValue;\n          $scope.$evalAsync(read);\n        }\n\n\n        $element.on('blur', function(){\n          $scope.$apply(function(){\n            $scope.dropDownOpen = false;\n          });\n        });\n\n        // Specify how UI should be updated when the model changes from outside\n        ngModelCtrl.$render = function() {\n          //update selected element text\n          updateSelected(ngModelCtrl.$viewValue || '');\n        };\n\n        // Write data to the model\n        function read() {\n          ngModelCtrl.$setViewValue(selectedItem);\n        }\n      }\n\n    };\n  })\n\n  .directive('tsPlaceholder', function(){\n    return {\n      restrict:'E',\n      require: '^tsDropDown',\n      transclude: 'element',\n      link: function(scope, iElem, iAttr, dropDownController, transclude){\n        dropDownController.setPlaceholder(transclude);\n      }\n    }\n  })\n\n  .directive('tsListItem', function(){\n    return {\n      restrict:'E',\n      require: '^tsDropDown',\n      transclude: 'element',\n      link: function(scope, iElem, iAttr, dropDownController, transclude){\n        dropDownController.setListItem(transclude);\n      }\n    }\n  });\n","(function(module) {\ntry {\n  module = angular.module('ts.utils');\n} catch (e) {\n  module = angular.module('ts.utils', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('templates/tsTooltip.html',\n    '<div class=\"ts-tooltip-container\">\\n' +\n    '  <div class=\"arrow-box-container\">\\n' +\n    '    <div id=\"tooltipMain\" class=\"ts-tooltip-main\">\\n' +\n    '      {{tsTooltip}}\\n' +\n    '    </div>\\n' +\n    '  </div>\\n' +\n    '</div>');\n}]);\n})();\n","/**\n * autoGrow - Increases height of textarea while typing\n *\n * @note use with min-height, max-height and box-sizing:border-box\n *\n * @example\n * \t<textarea auto-grow></textarea>\n */\n angular.module('ts.utils').directive('autoGrow', function($timeout) {\n  return {\n    restrict: 'A',\n    link: function($scope, $element, $attrs) {\n      function grow() {\n        $element[0].style.height = 0; // autoshrink - need accurate scrollHeight\n        $element[0].style.height = $element[0].scrollHeight + 'px';\n      }\n      $element.on('input', grow);\n      $timeout(grow, true);\n    }\n  }\n});\n","(function(module) {\ntry {\n  module = angular.module('ts.utils');\n} catch (e) {\n  module = angular.module('ts.utils', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('templates/tsDropDown.html',\n    '<div class=\"drop-down-container\">\\n' +\n    '  <div class=\"selected-item-container\">\\n' +\n    '  </div><div class=\"arrow-container\" ng-class=\"{\\'arrow-default\\':!dropDownOpen, \\'arrow-open\\':dropDownOpen}\">\\n' +\n    '  </div>\\n' +\n    '  <div ng-show=\"dropDownOpen\"\\n' +\n    '       class=\"drop-down-list-container\">\\n' +\n    '    <ul>\\n' +\n    '    </ul>\\n' +\n    '  </div>\\n' +\n    '</div>');\n}]);\n})();\n"],"sourceRoot":"/source/"}