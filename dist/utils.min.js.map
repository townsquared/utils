{"version":3,"sources":["utils.min.js","utils.js","uiEvent.js","truncate.js","scrollOn.js","paginator.js","focusOn.js","autoGrow.js"],"names":["_classCallCheck","instance","Constructor","TypeError","angular","module","directive","$parse","priority","link","$scope","$elm","$attrs","events","$eval","uiEvent","forEach","eventName","fn","bind","evt","params","Array","prototype","slice","call","arguments","splice","$event","$params","$$phase","$apply","filter","value","wordLimit","length","undefined","ellipses","words","split","join","$timeout","pre","$element","$on","scrollOn","event","location","scrollTop","scrollHeight","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","factory","$http","$q","Paginator","paginate","options","relatedHelpers","this","resetOptions","related","_","mapValues","extend","limit","offset","page","hasMore","items","item","unshift","getRelated","indexOf","_this","loading","then","concat","reverse","uniq","when","_this2","all","helper","name","relatedItems","set","reset","_paginate","isString","paginateOptions","get","listener","noop","$observe","newVal","focus","restrict","grow","style","height","on"],"mappings":"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","file":"utils.min.js","sourcesContent":[null,"angular.module('ts.utils', []);\n","/**\n * @TODO remove in liue of ui-utils\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\nangular.module('ts.utils').directive('uiEvent', function ($parse) {\n    return {\n        priority: 100,\n        link: function ($scope, $elm, $attrs) {\n            var events = $scope.$eval($attrs.uiEvent);\n            angular.forEach(events, function (uiEvent, eventName) {\n                var fn = $parse(uiEvent);\n                $elm.bind(eventName, function (evt) {\n                    var params = Array.prototype.slice.call(arguments);\n                    //Take out first paramater (event object);\n                    params = params.splice(1);\n                    fn($scope, {$event: evt, $params: params});\n                    if (!$scope.$$phase) {\n                        $scope.$apply();\n                    }\n                });\n            });\n        }\n    };\n});\n","/**\n * truncate - Truncates a string by a specified number of words\n *\n * @example\n * \t<p>\n * \t\t{{::post.body | truncate : 35}}\n * \t\t<a ng-if=\"::post.body.split(' ').length>35\">Read More</a>\n * \t</p>\n *\n * @param {string} value  The string to be truncated\n * @param {int} [wordLimit] The number of words to truncate at. Default: 50\n * @param {string} [ellipses] The string to use as an ellipses. Default: '…' (&hellip;)\n */\n angular.module('ts.utils').filter('ts-truncate', function() {\n  return function(value, wordLimit = 50, ellipses = '…'){\n    if (!value)\n      return value;\n\n    var words = value.split(' ');\n\n    if (words.length > wordLimit) {\n      value = words.slice(0, wordLimit).join(' ');\n\n      if (ellipses)\n        value += ellipses;\n    }\n\n    return value;\n  }\n});\n","\n/**\n * scrollOn - $broadcast()/$emit() a $scope event with the location to trigger scrolling\n *\n * @example\n *   <ul scroll-on=\"someEventName\" style=\"overflow: auto\">...</ul>\n *   ...\n *   var location = 'bottom';\n *   $scope.$broadcast('someEventName', location)\n *\n * @param location {'top'|'bottom'|offset} must be passed as event data\n */\nangular.module('ts.utils').directive('scrollOn', function($timeout) {\n  return {\n    link: {\n      pre: function($scope, $element, $attrs) {\n        $scope.$on($attrs.scrollOn, function(event, location){\n          // let updates render\n          $timeout(function(){\n            if (location === 'bottom') {\n              $element[0].scrollTop = $element[0].scrollHeight;\n            }\n            else if (location === 'top') {\n              $element[0].scrollTop = 0;\n            }\n            else {\n              $element[0].scrollTop = location;\n            }\n          }, true);\n        });\n      }\n    }\n  };\n});\n","/**\n * Paginator\n *\n * Simple paginator utility example that abstracts logic in a controllable pattern\n *\n * @TODO make paginator only lookup missing related data\n *\n * @param paginate {function} Query function that takes paginationOptions\n *\n * @example\n *   resolve: {\n *     // Prepares the paginator\n *     paginator: function(Paginator, Project) {\n *       // Calls `Project.list(paginationOptions)`\n *       return new Paginator(Project.list, { limit: 50 });\n *     },\n *     // Queries the initial load\n *     projects: function(paginator) {\n *       return paginator.next();\n *     }\n *   }\n *\n * @example\n *   resolve: {\n *     taskPaginator: function(Paginator, Task, $stateParams) {\n *       return new Paginator( (paginationOptions) => Task.list($stateParams.projectId, paginationOptions) );\n *       // or\n *       return new Paginator( Task.list, { projectId: $stateParams.projectId } );\n *     },\n *     tasks: function(taskPaginator) {\n *       return taskPaginator.next();\n *     }\n *   }\n */\nangular.module('ts.utils').factory('Paginator', function($http, $q){\n\n  class Paginator {\n    /**\n     * @param  {string|function} paginate URL or callback function that returns\n     *                                    a promise\n     * @param  {object} options Default paginate query options\n     * @param  {object} relatedHelpers Map of callback functions that take array\n     *                                 of items and returns an indexed hash\n     */\n    constructor(paginate, options = {}, relatedHelpers = {}) {\n      this.resetOptions = options;\n      this.paginate = paginate;\n      this.relatedHelpers = relatedHelpers;\n      this.related = _.mapValues(this.relatedHelpers, () => {\n        return {};\n      });\n    }\n\n    /**\n     * paginator.paginate - paginator function\n     *\n     * @param  {url|function} paginate\n     *   If a url is provided, a wrapper for $http.get() is created\n     *   If a callback is provided, use that instead\n     */\n    set paginate(paginate) {\n      this.reset();\n      if (angular.isString(paginate))\n        this._paginate = (paginateOptions) => $http.get(paginate, { params: paginateOptions });\n      else\n        this._paginate = paginate;\n    }\n\n    get paginate() {\n      return this._paginate;\n    }\n\n    /**\n     * reset()\n     *\n     * Clear items collection. Useful for preserving related data.\n     *\n     * @note If you want a hard reset of all related data, create a new Paginator\n     *\n     * @param {object} [resetOptions]\n     *   Optional hash of options to reset with,\n     *   otherwise last reset options will be used\n     */\n    reset(resetOptions = this.resetOptions) {\n      this.resetOptions = resetOptions;\n      this.options = _.extend({\n        limit: 40,\n        offset: 0,\n        page: 0\n      }, resetOptions);\n      this.hasMore = true;\n      this.items = [];\n      return this;\n    }\n\n    /**\n     * add()\n     *\n     * Add item to this.items and populate related\n     *\n     * @param  {index|object} item Reference to an object or the index\n     */\n    add(item) {\n      this.items.unshift(item);\n      return this.getRelated([item]);\n    }\n\n    /**\n     * remove()\n     *\n     * Remove item from items\n     *\n     * @param  {index|object} item Reference to an object or the index\n     */\n    remove(item) {\n      if (!this.items[item])\n        item = this.items.indexOf(item);\n\n      if (~item)\n        this.items.splice(item, 1);\n    }\n\n    /**\n     * next()\n     *\n     * Sets `paginator.loading` to true while querying\n     *\n     * @return {Function} [description]\n     */\n    next() {\n      if (!this.hasMore) return $q.when(this.items);\n      if (this.loading) return this.loading;\n\n      return this.loading = this.paginate(this.options)\n        .then( items => {\n          if (!items.length)\n            this.hasMore = false;\n\n          this.items = this.items.concat(items.reverse());\n\n          // @TODO remove shitty hack for bugs with backend giving duplicates\n          this.items = _.uniq(this.items, 'uuid');\n\n          this.options.page++;\n          this.options.offset = this.options.page * this.options.limit;\n          return this.getRelated(items);\n        })\n        .then( related => this.items )\n        .finally( () => this.loading = null );;\n    }\n\n    /**\n     * getRelated(newItems)\n     *\n     * Iterates over related data retrieval helpers\n     * When each helper resolves with a hash of relatedItems, they are merged onto\n     * the paginator's existing cache of related items.\n     *\n     * @example\n     *   paginator = new Paginator(Project.list(), {}, { owners: Project.relatedOwners });\n     *   paginator.next();\n     *\n     *   <li ng-repeat=\"project in paginator.projects\">\n     *     {{paginator.related.owners[project.owner_id].name}}\n     *   </li>\n     *\n     * @param  {array} [items] an array of objects to pass to the related helper\n     * @return {Promise}       resolved when all helpers are done\n     */\n    getRelated(items = this.items) {\n      return $q.all(_.mapValues(this.relatedHelpers, (helper, name) =>\n        helper(items)\n          .then( relatedItems => _.extend(this.related[name], relatedItems) )\n      ));\n    }\n\n  }\n\n  return Paginator;\n});\n","/**\n * focusOn - Focuses an input on scope event\n *\n * @example\n *   <input focus-on=\"someEventName\">\n *   or\n *   <input focus-on=\"focus-row-{{$index}}\">\n *   ...\n *   $scope.$broadcast('someEventName')\n *\n */\n angular.module('ts.utils').directive('focusOn', function(){\n  return {\n    link: function($scope, $element, $attrs) {\n      var listener = angular.noop;\n      $attrs.$observe('focusOn', function(newVal){\n        // Stop listening to old event name\n        listener();\n        // Listen to new event name\n        listener = $scope.$on(newVal, function(){\n          $element[0].focus();\n        });\n      });\n    }\n  };\n});\n","/**\n * autoGrow - Increases height of textarea while typing\n *\n * @note use with min-height, max-height and box-sizing:border-box\n *\n * @example\n * \t<textarea auto-grow></textarea>\n */\n angular.module('ts.utils').directive('autoGrow', function($timeout) {\n  return {\n    restrict: 'A',\n    link: function($scope, $element, $attrs) {\n      function grow() {\n        $element[0].style.height = 0; // autoshrink - need accurate scrollHeight\n        $element[0].style.height = $element[0].scrollHeight + 'px';\n      }\n      $element.on('input', grow);\n      $timeout(grow, true);\n    }\n  }\n});\n"],"sourceRoot":"/source/"}