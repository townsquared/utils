{"version":3,"sources":["utils.min.js","utils.js","uiEvent.js","truncate.js","tooltip.js","scrollOn.js","focusOn.js","autoGrow.js","tsTooltip.js"],"names":["angular","module","directive","$parse","priority","link","$scope","$elm","$attrs","events","$eval","uiEvent","forEach","eventName","fn","bind","evt","params","Array","prototype","slice","call","arguments","splice","$event","$params","$$phase","$apply","filter","value","wordLimit","ellipses","length","undefined","isNumber","words","split","join","$templateCache","$compile","$window","restrict","scope","tsTooltip","tsTooltipDirection","tsTooltipEvent","tsTooltipShow","$element","$attr","offset","elem","docElem","win","rect","doc","getBoundingClientRect","width","height","getClientRects","ownerDocument","documentElement","top","pageYOffset","clientTop","left","pageXOffset","clientLeft","makeVisible","isVisible","newTooltip","style","visibility","elementOffset","direction","origOffset","offsetHeight","tooltipMain","ARROW_SIZE","offsetWidth","makeInvisible","toggleVisibility","template","get","eventType","find","addClass","document","body","insertBefore","childNodes","on","$watch","newVal","oldVal","$timeout","pre","$on","scrollOn","event","location","scrollTop","scrollHeight","focusOnConfig","listener","noop","$observe","speed","parents","targetWindow","animate","complete","focus","extraOffset","focusOnOffset","parseInt","autoCenter","focusOnAutoCenter","window","innerHeight","clientHeight","$","provider","_offset","_autoCenter","this","$get","grow","e","run","put"],"mappings":"AAAA,YCAAA,SAAQC,OAAO,eCWfD,QAAQC,OAAO,YAAYC,UAAU,UAAW,SAAUC,QACtD,OACIC,SAAU,IACVC,KAAM,SAAUC,OAAQC,KAAMC,QAC1B,GAAIC,QAASH,OAAOI,MAAMF,OAAOG,QACjCX,SAAQY,QAAQH,OAAQ,SAAUE,QAASE,WACvC,GAAIC,IAAKX,OAAOQ,QAChBJ,MAAKQ,KAAKF,UAAW,SAAUG,KAC3B,GAAIC,QAASC,MAAMC,UAAUC,MAAMC,KAAKC,UAExCL,QAASA,OAAOM,OAAO,GACvBT,GAAGR,QAASkB,OAAQR,IAAKS,QAASR,SAC7BX,OAAOoB,SACRpB,OAAOqB,iBCX9B3B,QAAQC,OAAO,YAAY2B,OAAO,aAAc,WAC/C,MAAO,UAASC,MAAOC,WHuCrB,GGvCgCC,UAAQT,UAAAU,QAAA,GAAAC,SAAAX,UAAA,GAAG,IAAGA,UAAA,EAC9C,KAAKO,QAAU7B,QAAQkC,SAASJ,WAC9B,MAAOD,MAET,IAAIM,OAAQN,MAAMO,MAAM,IASxB,OAPID,OAAMH,OAASF,YACjBD,MAAQM,MAAMf,MAAM,EAAGU,WAAWO,KAAK,KAEnCN,WACFF,OAASE,WAGNF,SCRX7B,QAAQC,OAAO,YAEZC,UAAU,YAAa,SAASoC,eAAgBC,SAAUC,SAEzD,OACEC,SAAS,IACTC,OACEC,UAAU,IACVC,mBAAmB,IACnBC,eAAe,IACfC,cAAc,KAEhBzC,KAAM,SAASC,OAAQyC,SAAUC,OAgB/B,QAASC,QAAQC,MACf,GAAIC,SAASC,IAAKC,KAAMC,GAExB,IAAMJ,KAON,MAHAG,MAAOH,KAAKK,wBAGPF,KAAKG,OAASH,KAAKI,QAAUP,KAAKQ,iBAAiB1B,QACtDsB,IAAMJ,KAAKS,cACXP,IAAMZ,QACNW,QAAUG,IAAIM,iBAGZC,IAAKR,KAAKQ,IAAMT,IAAIU,YAAcX,QAAQY,UAC1CC,KAAMX,KAAKW,KAAOZ,IAAIa,YAAcd,QAAQe,aAPhD,OAcF,QAASC,eACP,IAAIC,UAAU,CAEZA,WAAY,EAGZC,WAAW,GAAGC,MAAMC,WAAW,SAE/B,IAAIC,eAAgBvB,OAAOF,SAAS,GAGpC,QAAO0B,WACL,IAAK,QACL,IAAK,OACHJ,WAAW,GAAGC,MAAMT,IAAIW,cAAeX,IAAIa,WAAWb,IAAId,SAAS,GAAG4B,aAAeC,YAAY,GAAGD,aAAa,EAAEE,WAAY,IAC/H,MAAM,KACH,MACL,IAAK,SACHR,WAAW,GAAGC,MAAMN,KAAKQ,cAAcR,KAAKU,WAAWV,KAAKjB,SAAS,GAAG+B,YAAY,EAAEF,YAAY,GAAGE,YAAY,EAAE,KAKvH,OAAOL,WACL,IAAK,QACHJ,WAAW,GAAGC,MAAMN,KAAKQ,cAAcR,KAAKU,WAAWV,KAAKjB,SAAS,GAAG+B,YAAYD,WAAW,IAC/F,MAAM,KACH,OACHR,WAAW,GAAGC,MAAMN,KAAKQ,cAAeR,KAAKU,WAAWV,KAAKY,YAAY,GAAGE,YAAcD,WAAa,IACvG,MAAM,KACH,MACHR,WAAW,GAAGC,MAAMT,IAAIW,cAAcX,IAAIa,WAAWb,IAAMe,YAAY,GAAGD,aAAaE,WAAY,IACnG,MAAM,KACH,SACHR,WAAW,GAAGC,MAAMT,IAAIW,cAAcX,IAAIa,WAAWb,IAAMd,SAAS,GAAG4B,aAAaE,WAAY,OAOxG,QAASE,iBACJX,YACDA,WAAY,EACZC,WAAW,GAAGC,MAAMC,WAAa,UAIrC,QAASS,oBACJZ,UACDW,gBAGAZ,cA5FJ,GAAIU,YAAa,GACbI,SAAW3C,eAAe4C,IAAI,4BAC9BT,UAAYnE,OAAOsC,oBAAsB,QACzCuC,UAAY7E,OAAOuC,gBAAkB,aACrCuB,WAAY,EAEZC,WAAa9B,SAAS0C,UAAU3E,OACpC+D,YAAW,GAAGC,MAAMC,WAAa,QAEjC,IAAIK,aAAcP,WAAWe,KAAK,eAClCR,aAAYS,SAASZ,WAGrBa,SAASC,KAAKC,aAAanB,WAAW,GAAGiB,SAASC,KAAKE,WAAW,GAwBlE,IAAIf,YAAazB,OAAOoB,WAAW,GA2DnC,IAA2BpC,SAAxBe,MAAMF,cACP,OAAOqC,WACL,IAAK,aACHpC,SAAS2C,GAAG,aAAcvB,aAC1BpB,SAAS2C,GAAG,aAAcX,cAC1B,MAAM,KACH,QACHhC,SAAS2C,GAAG,QAASV,sBAKzB1E,QAAOqF,OAAO,gBAAgB,SAASC,OAAQC,QAC1CD,OACDzB,cAGAY,sBCrId/E,QAAQC,OAAO,YAAYC,UAAU,WAAY,SAAS4F,UACxD,OACEzF,MACE0F,IAAK,SAASzF,OAAQyC,SAAUvC,QAC9BF,OAAO0F,IAAIxF,OAAOyF,SAAU,SAASC,MAAOC,UAE1CL,SAAS,WACU,WAAbK,SACFpD,SAAS,GAAGqD,UAAYrD,SAAS,GAAGsD,aAEhB,QAAbF,SACPpD,SAAS,GAAGqD,UAAY,EAGxBrD,SAAS,GAAGqD,UAAYD,WAEzB,UCEZnG,QAAQC,OAAO,YAAYC,UAAU,UAAW,SAASsC,QAAS8D,eACjE,OACEjG,KAAM,SAASC,OAAQyC,SAAUvC,QAC/B,GAAI+F,UAAWvG,QAAQwG,IACvBhG,QAAOiG,SAAS,UAAW,SAASb,QAElCW,WAEAA,SAAWjG,OAAO0F,IAAIJ,OAAQ,SAASc,OAGrC,GAFAA,MAAQA,OAAS,IAEd3D,SAAS4D,QAAQ,iBAAiB3E,OAAQ,CAC3C,GAAI4E,cAAe7D,SAAS4D,QAAQ,yBACpCC,cAAaC,SACXT,UAAWrD,SAASE,SAASY,IAAM+C,aAAa3D,SAASY,IAAM+C,aAAaR,cAE5EM,MAAOA,MACPI,SAAU,WAER/D,SAAS,GAAGgE,eAIb,CACH,GAAI9D,QAASF,SAASE,SAASY,IAG3BmD,YAAcV,cAAcrD,MAGJhB,UAAzBzB,OAAOyG,gBACRD,YAAcE,SAAS1G,OAAOyG,gBAK5BX,cAAea,YAAyClF,SAA3BzB,OAAO4G,mBACnC5G,OAAO4G,mBAA+C,QAA1B5G,OAAO4G,kBACtCnE,OAASA,OAASoE,OAAOC,YAAY,EAAIvE,SAAS,GAAGwE,aAAa,EAGlEtE,QAAkB+D,YAGpBQ,EAAE,QAAQX,SAAUT,UAAWnD,SAC7ByD,MAAOA,MACPI,SAAU,WAER/D,SAAS,GAAGgE,oBAU3BU,SAAS,gBAAiB,WACzB,GAAIC,SAAU,EACVC,aAAc,CAElBC,MAAKT,WAAa,SAAStF,OACzB8F,YAAc9F,OAGhB+F,KAAK3E,OAAS,SAASpB,OACrB6F,QAAU7F,OAGZ+F,KAAKC,KAAO,WACV,OACE5E,OAAQyE,QACRP,WAAWQ,gBC/FhB3H,QAAQC,OAAO,YAAYC,UAAU,WAAY,SAAS4F,UACzD,OACErD,SAAU,IACVpC,KAAM,SAASC,OAAQyC,SAAUvC,QAC/B,QAASsH,QACP/E,SAAS,GAAGuB,MAAMb,OAAS,EAC3BV,SAAS,GAAGuB,MAAMb,OAASV,SAAS,GAAGsD,aAAe,KAExDtD,SAAS2C,GAAG,QAASoC,MACrBhC,SAASgC,MAAM,OCjBrB,SAAU7H,QACV,IACEA,OAASD,QAAQC,OAAO,YACxB,MAAO8H,GACP9H,OAASD,QAAQC,OAAO,eAE1BA,OAAO+H,KAAK,iBAAkB,SAAS1F,gBACrCA,eAAe2F,IAAI,2BACjB","file":"utils.min.js","sourcesContent":["'use strict';\n\nangular.module('ts.utils', []);\n/**\n * @TODO remove in liue of ui-utils\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\n'use strict';\n\nangular.module('ts.utils').directive('uiEvent', function ($parse) {\n    return {\n        priority: 100,\n        link: function link($scope, $elm, $attrs) {\n            var events = $scope.$eval($attrs.uiEvent);\n            angular.forEach(events, function (uiEvent, eventName) {\n                var fn = $parse(uiEvent);\n                $elm.bind(eventName, function (evt) {\n                    var params = Array.prototype.slice.call(arguments);\n                    //Take out first paramater (event object);\n                    params = params.splice(1);\n                    fn($scope, { $event: evt, $params: params });\n                    if (!$scope.$$phase) {\n                        $scope.$apply();\n                    }\n                });\n            });\n        }\n    };\n});\n/**\n * truncate - Truncates a string by a specified number of words\n *\n * @example\n * \t<p>\n * \t\t{{::post.body | truncate : 35}}\n * \t\t<a ng-if=\"::post.body.split(' ').length>35\">Read More</a>\n * \t</p>\n *\n * @param {string} value  The string to be truncated\n * @param {int} [wordLimit] The number of words to truncate at. If falsey, doesn't truncate.\n * @param {string} [ellipses] The string to use as an ellipses. Default: '…' (&hellip;)\n */\n'use strict';\n\nangular.module('ts.utils').filter('tsTruncate', function () {\n  return function (value, wordLimit) {\n    var ellipses = arguments.length <= 2 || arguments[2] === undefined ? '…' : arguments[2];\n\n    if (!value || !angular.isNumber(wordLimit)) return value;\n\n    var words = value.split(' ');\n\n    if (words.length > wordLimit) {\n      value = words.slice(0, wordLimit).join(' ');\n\n      if (ellipses) value += ellipses;\n    }\n\n    return value;\n  };\n});\n/**\n * ts-tooltip - Shows a tooltip with an arrow pointing to the element the directive is applied to.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *<button\n *        ts-tooltip-event=\"click\"                              // Options are click or mouseover\n *        ts-tooltip=\"Something that shows up in there\"         // The text to show in the tooltip\n *        ts-tooltip-direction=\"bottom\"                         // The direction the tooltip pops up\n *        ts-tooltip-show=\"someModel.someBoolean\"               // A boolean if set will use this instead of events\n *        >\n *   Bottom Click Me\n * </button>\n *\n */\n\n'use strict';\n\nangular.module('ts.utils').directive('tsTooltip', function ($templateCache, $compile, $window) {\n\n  return {\n    restrict: 'A',\n    scope: {\n      tsTooltip: '@',\n      tsTooltipDirection: '@',\n      tsTooltipEvent: '@',\n      tsTooltipShow: '='\n    },\n    link: function link($scope, $element, $attr) {\n      var ARROW_SIZE = 10;\n      var template = $templateCache.get('templates/tsTooltip.html');\n      var direction = $scope.tsTooltipDirection || 'right';\n      var eventType = $scope.tsTooltipEvent || 'mouseenter';\n      var isVisible = false;\n\n      var newTooltip = $compile(template)($scope);\n      newTooltip[0].style.visibility = 'hidden';\n\n      var tooltipMain = newTooltip.find(\"#tooltipMain\");\n      tooltipMain.addClass(direction);\n\n      //$element.after(newTooltip);\n      document.body.insertBefore(newTooltip[0], document.body.childNodes[0]);\n\n      function offset(elem) {\n        var docElem, win, rect, doc;\n\n        if (!elem) {\n          return;\n        }\n\n        rect = elem.getBoundingClientRect();\n\n        // Make sure element is not hidden (display: none) or disconnected\n        if (rect.width || rect.height || elem.getClientRects().length) {\n          doc = elem.ownerDocument;\n          win = $window;\n          docElem = doc.documentElement;\n\n          return {\n            top: rect.top + win.pageYOffset - docElem.clientTop,\n            left: rect.left + win.pageXOffset - docElem.clientLeft\n          };\n        }\n      }\n\n      var origOffset = offset(newTooltip[0]);\n\n      function makeVisible() {\n        if (!isVisible) {\n\n          isVisible = true;\n\n          newTooltip[0].style.visibility = 'visible';\n\n          var elementOffset = offset($element[0]);\n\n          //Sets the common top for left and right, or common left for top and bottom\n          switch (direction) {\n            case 'right':\n            case 'left':\n              newTooltip[0].style.top = elementOffset.top - origOffset.top + $element[0].offsetHeight - tooltipMain[0].offsetHeight / 2 - ARROW_SIZE + 'px';\n              break;\n            case 'top':\n            case 'bottom':\n              newTooltip[0].style.left = elementOffset.left - origOffset.left + $element[0].offsetWidth / 2 - tooltipMain[0].offsetWidth / 2 + 'px';\n              break;\n          }\n\n          //Sets the specific left or top values for each direction\n          switch (direction) {\n            case 'right':\n              newTooltip[0].style.left = elementOffset.left - origOffset.left + $element[0].offsetWidth + ARROW_SIZE + 'px';\n              break;\n            case 'left':\n              newTooltip[0].style.left = elementOffset.left - origOffset.left - tooltipMain[0].offsetWidth - ARROW_SIZE + 'px';\n              break;\n            case 'top':\n              newTooltip[0].style.top = elementOffset.top - origOffset.top - tooltipMain[0].offsetHeight - ARROW_SIZE + 'px';\n              break;\n            case 'bottom':\n              newTooltip[0].style.top = elementOffset.top - origOffset.top + $element[0].offsetHeight + ARROW_SIZE + 'px';\n              break;\n          }\n        }\n      }\n\n      function makeInvisible() {\n        if (isVisible) {\n          isVisible = false;\n          newTooltip[0].style.visibility = 'hidden';\n        }\n      }\n\n      function toggleVisibility() {\n        if (isVisible) {\n          makeInvisible();\n        } else {\n          makeVisible();\n        }\n      }\n\n      if ($attr.tsTooltipShow === undefined) {\n        switch (eventType) {\n          case 'mouseenter':\n            $element.on('mouseenter', makeVisible);\n            $element.on('mouseleave', makeInvisible);\n            break;\n          case 'click':\n            $element.on('click', toggleVisibility);\n            break;\n        }\n      } else {\n        $scope.$watch('tsTooltipShow', function (newVal, oldVal) {\n          if (newVal) {\n            makeVisible();\n          } else {\n            makeInvisible();\n          }\n        });\n      }\n    }\n  };\n});\n\n/**\n * scrollOn - $broadcast()/$emit() a $scope event with the location to trigger scrolling\n *\n * @example\n *   <ul scroll-on=\"someEventName\" style=\"overflow: auto\">...</ul>\n *   ...\n *   var location = 'bottom';\n *   $scope.$broadcast('someEventName', location)\n *\n * @param location {'top'|'bottom'|offset} must be passed as event data\n */\n'use strict';\n\nangular.module('ts.utils').directive('scrollOn', function ($timeout) {\n  return {\n    link: {\n      pre: function pre($scope, $element, $attrs) {\n        $scope.$on($attrs.scrollOn, function (event, location) {\n          // let updates render\n          $timeout(function () {\n            if (location === 'bottom') {\n              $element[0].scrollTop = $element[0].scrollHeight;\n            } else if (location === 'top') {\n              $element[0].scrollTop = 0;\n            } else {\n              $element[0].scrollTop = location;\n            }\n          }, true);\n        });\n      }\n    }\n  };\n});\n/**\n * focusOn - Focuses an input on scope event\n *\n * @note depends on jQuery\n *\n * @example\n *   <input focus-on=\"someEventName\">\n *   or\n *   <input focus-on=\"focus-row-{{$index}}\">\n *   or\n *   <p focus-on=\"anotherEvent\"></p>\n *   ...\n *   $scope.$broadcast('someEventName');\n *   $scope.$broadcast('focus-row-2');\n *   $scope.$broadcast('anotherEvent');\n *\n *   focusOnConfigProvider - can be injected into a .config(function(focusOnConfigProvider){}) block to configure the\n *   app wide settings for the focusOn directive\n *\n *   Settings include:\n *      offset - number of pixels to offset the scroll to for a header or other info that appears above the element you\n *      want to scroll to the top of the screen.  The offset is subtracted from the computed scroll position\n *\n *      autoCenter - boolean if true will use the element height and document body height to scroll the element to the\n *      center of the screen instead of the top\n *\n *   App wide settings can be overridden using attributes along with the focus-on directive.  The attributes for the\n *   offset and autoCenter are focus-on-offset and focus-on-auto-center respectively.\n *\n */\n'use strict';\n\nangular.module('ts.utils').directive('focusOn', function ($window, focusOnConfig) {\n  return {\n    link: function link($scope, $element, $attrs) {\n      var listener = angular.noop;\n      $attrs.$observe('focusOn', function (newVal) {\n        // Stop listening to old event name\n        listener();\n        // Listen to new event name\n        listener = $scope.$on(newVal, function (speed) {\n          speed = speed || 1000;\n          // Center element on screen\n          if ($element.parents('.reveal-modal').length) {\n            var targetWindow = $element.parents('.reveal-modal .content');\n            targetWindow.animate({\n              scrollTop: $element.offset().top - targetWindow.offset().top + targetWindow.scrollTop()\n            }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          } else {\n            var offset = $element.offset().top;\n\n            // Use provider configured offset\n            var extraOffset = focusOnConfig.offset;\n\n            // If attribute is set override provider configured offset\n            if ($attrs.focusOnOffset !== undefined) {\n              extraOffset = parseInt($attrs.focusOnOffset);\n            }\n\n            // Check if provider or attribute set autoCenter/auto-center to true if so use offset/2 ignores the extra\n            // offset in this case\n            if (focusOnConfig.autoCenter && $attrs.focusOnAutoCenter === undefined || $attrs.focusOnAutoCenter && $attrs.focusOnAutoCenter == 'true') {\n              offset = offset - window.innerHeight / 2 - $element[0].clientHeight / 2;\n            } else {\n              offset = offset - extraOffset;\n            }\n\n            $('body').animate({ scrollTop: offset }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n}).provider('focusOnConfig', function () {\n  var _offset = 0;\n  var _autoCenter = false;\n\n  this.autoCenter = function (value) {\n    _autoCenter = value;\n  };\n\n  this.offset = function (value) {\n    _offset = value;\n  };\n\n  this.$get = function () {\n    return {\n      offset: _offset,\n      autoCenter: _autoCenter\n    };\n  };\n});\n/**\n * autoGrow - Increases height of textarea while typing\n *\n * @note use with min-height, max-height and box-sizing:border-box\n *\n * @example\n * \t<textarea auto-grow></textarea>\n */\n'use strict';\n\nangular.module('ts.utils').directive('autoGrow', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link($scope, $element, $attrs) {\n      function grow() {\n        $element[0].style.height = 0; // autoshrink - need accurate scrollHeight\n        $element[0].style.height = $element[0].scrollHeight + 'px';\n      }\n      $element.on('input', grow);\n      $timeout(grow, true);\n    }\n  };\n});\n'use strict';\n\n(function (module) {\n  try {\n    module = angular.module('ts.utils');\n  } catch (e) {\n    module = angular.module('ts.utils', []);\n  }\n  module.run(['$templateCache', function ($templateCache) {\n    $templateCache.put('templates/tsTooltip.html', '<div class=\"ts-tooltip-container\">\\n' + '  <div class=\"arrow-box-container\">\\n' + '    <div id=\"tooltipMain\" class=\"ts-tooltip-main\">\\n' + '      {{tsTooltip}}\\n' + '    </div>\\n' + '  </div>\\n' + '</div>');\n  }]);\n})();","angular.module('ts.utils', []);\n","/**\n * @TODO remove in liue of ui-utils\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\nangular.module('ts.utils').directive('uiEvent', function ($parse) {\n    return {\n        priority: 100,\n        link: function ($scope, $elm, $attrs) {\n            var events = $scope.$eval($attrs.uiEvent);\n            angular.forEach(events, function (uiEvent, eventName) {\n                var fn = $parse(uiEvent);\n                $elm.bind(eventName, function (evt) {\n                    var params = Array.prototype.slice.call(arguments);\n                    //Take out first paramater (event object);\n                    params = params.splice(1);\n                    fn($scope, {$event: evt, $params: params});\n                    if (!$scope.$$phase) {\n                        $scope.$apply();\n                    }\n                });\n            });\n        }\n    };\n});\n","/**\n * truncate - Truncates a string by a specified number of words\n *\n * @example\n * \t<p>\n * \t\t{{::post.body | truncate : 35}}\n * \t\t<a ng-if=\"::post.body.split(' ').length>35\">Read More</a>\n * \t</p>\n *\n * @param {string} value  The string to be truncated\n * @param {int} [wordLimit] The number of words to truncate at. If falsey, doesn't truncate.\n * @param {string} [ellipses] The string to use as an ellipses. Default: '…' (&hellip;)\n */\n angular.module('ts.utils').filter('tsTruncate', function() {\n  return function(value, wordLimit, ellipses = '…'){\n    if (!value || !angular.isNumber(wordLimit))\n      return value;\n\n    var words = value.split(' ');\n\n    if (words.length > wordLimit) {\n      value = words.slice(0, wordLimit).join(' ');\n\n      if (ellipses)\n        value += ellipses;\n    }\n\n    return value;\n  }\n});\n","/**\n * ts-tooltip - Shows a tooltip with an arrow pointing to the element the directive is applied to.\n *\n * @note depends on jQuery\n *\n * @example\n *\n *<button\n *        ts-tooltip-event=\"click\"                              // Options are click or mouseover\n *        ts-tooltip=\"Something that shows up in there\"         // The text to show in the tooltip\n *        ts-tooltip-direction=\"bottom\"                         // The direction the tooltip pops up\n *        ts-tooltip-show=\"someModel.someBoolean\"               // A boolean if set will use this instead of events\n *        >\n *   Bottom Click Me\n * </button>\n *\n */\n\n\nangular.module('ts.utils')\n\n  .directive('tsTooltip', function($templateCache, $compile, $window){\n\n    return {\n      restrict:'A',\n      scope:{\n        tsTooltip:'@',\n        tsTooltipDirection:'@',\n        tsTooltipEvent:'@',\n        tsTooltipShow:'='\n      },\n      link: function($scope, $element, $attr) {\n        var ARROW_SIZE = 10;\n        var template = $templateCache.get('templates/tsTooltip.html');\n        var direction = $scope.tsTooltipDirection || 'right';\n        var eventType = $scope.tsTooltipEvent || 'mouseenter';\n        var isVisible = false;\n\n        var newTooltip = $compile(template)($scope);\n        newTooltip[0].style.visibility = 'hidden';\n\n        var tooltipMain = newTooltip.find(\"#tooltipMain\");\n        tooltipMain.addClass(direction);\n\n        //$element.after(newTooltip);\n        document.body.insertBefore(newTooltip[0],document.body.childNodes[0]);\n\n        function offset( elem ) {\n          var docElem, win, rect, doc;\n\n          if ( !elem ) {\n            return;\n          }\n\n          rect = elem.getBoundingClientRect();\n\n          // Make sure element is not hidden (display: none) or disconnected\n          if ( rect.width || rect.height || elem.getClientRects().length ) {\n            doc = elem.ownerDocument;\n            win = $window;\n            docElem = doc.documentElement;\n\n            return {\n              top: rect.top + win.pageYOffset - docElem.clientTop,\n              left: rect.left + win.pageXOffset - docElem.clientLeft\n            };\n          }\n        }\n\n        var origOffset = offset(newTooltip[0]);\n\n        function makeVisible(){\n          if(!isVisible){\n\n            isVisible = true;\n\n\n            newTooltip[0].style.visibility='visible';\n\n            var elementOffset = offset($element[0]);\n\n            //Sets the common top for left and right, or common left for top and bottom\n            switch(direction){\n              case 'right':\n              case 'left':\n                newTooltip[0].style.top=(elementOffset.top-origOffset.top+$element[0].offsetHeight - tooltipMain[0].offsetHeight/2-ARROW_SIZE)+'px';\n                break;\n              case 'top':\n              case 'bottom':\n                newTooltip[0].style.left=elementOffset.left-origOffset.left+$element[0].offsetWidth/2-tooltipMain[0].offsetWidth/2+'px';\n                break;\n            }\n\n            //Sets the specific left or top values for each direction\n            switch(direction) {\n              case 'right':\n                newTooltip[0].style.left=elementOffset.left-origOffset.left+$element[0].offsetWidth+ARROW_SIZE+'px';\n                break;\n              case 'left':\n                newTooltip[0].style.left=(elementOffset.left-origOffset.left-tooltipMain[0].offsetWidth - ARROW_SIZE )+'px';\n                break;\n              case 'top':\n                newTooltip[0].style.top=elementOffset.top-origOffset.top - tooltipMain[0].offsetHeight-ARROW_SIZE+ 'px';\n                break;\n              case 'bottom':\n                newTooltip[0].style.top=elementOffset.top-origOffset.top + $element[0].offsetHeight+ARROW_SIZE+ 'px';\n                break;\n            }\n\n          }\n        }\n\n        function makeInvisible(){\n          if(isVisible){\n            isVisible = false;\n            newTooltip[0].style.visibility = 'hidden';\n          }\n        }\n\n        function toggleVisibility(){\n          if(isVisible){\n            makeInvisible();\n          }\n          else{\n            makeVisible();\n          }\n        }\n\n        if($attr.tsTooltipShow === undefined){\n          switch(eventType){\n            case 'mouseenter':\n              $element.on('mouseenter', makeVisible);\n              $element.on('mouseleave', makeInvisible);\n              break;\n            case 'click':\n              $element.on('click', toggleVisibility);\n              break;\n          }\n        }\n        else{\n          $scope.$watch('tsTooltipShow',function(newVal, oldVal){\n            if(newVal){\n              makeVisible();\n            }\n            else{\n              makeInvisible();\n            }\n          })\n        }\n\n\n\n\n      }\n    };\n  });\n","\n/**\n * scrollOn - $broadcast()/$emit() a $scope event with the location to trigger scrolling\n *\n * @example\n *   <ul scroll-on=\"someEventName\" style=\"overflow: auto\">...</ul>\n *   ...\n *   var location = 'bottom';\n *   $scope.$broadcast('someEventName', location)\n *\n * @param location {'top'|'bottom'|offset} must be passed as event data\n */\nangular.module('ts.utils').directive('scrollOn', function($timeout) {\n  return {\n    link: {\n      pre: function($scope, $element, $attrs) {\n        $scope.$on($attrs.scrollOn, function(event, location){\n          // let updates render\n          $timeout(function(){\n            if (location === 'bottom') {\n              $element[0].scrollTop = $element[0].scrollHeight;\n            }\n            else if (location === 'top') {\n              $element[0].scrollTop = 0;\n            }\n            else {\n              $element[0].scrollTop = location;\n            }\n          }, true);\n        });\n      }\n    }\n  };\n});\n","/**\n * focusOn - Focuses an input on scope event\n *\n * @note depends on jQuery\n *\n * @example\n *   <input focus-on=\"someEventName\">\n *   or\n *   <input focus-on=\"focus-row-{{$index}}\">\n *   or\n *   <p focus-on=\"anotherEvent\"></p>\n *   ...\n *   $scope.$broadcast('someEventName');\n *   $scope.$broadcast('focus-row-2');\n *   $scope.$broadcast('anotherEvent');\n *\n *   focusOnConfigProvider - can be injected into a .config(function(focusOnConfigProvider){}) block to configure the\n *   app wide settings for the focusOn directive\n *\n *   Settings include:\n *      offset - number of pixels to offset the scroll to for a header or other info that appears above the element you\n *      want to scroll to the top of the screen.  The offset is subtracted from the computed scroll position\n *\n *      autoCenter - boolean if true will use the element height and document body height to scroll the element to the\n *      center of the screen instead of the top\n *\n *   App wide settings can be overridden using attributes along with the focus-on directive.  The attributes for the\n *   offset and autoCenter are focus-on-offset and focus-on-auto-center respectively.\n *\n */\n angular.module('ts.utils').directive('focusOn', function($window, focusOnConfig){\n  return {\n    link: function($scope, $element, $attrs) {\n      var listener = angular.noop;\n      $attrs.$observe('focusOn', function(newVal){\n        // Stop listening to old event name\n        listener();\n        // Listen to new event name\n        listener = $scope.$on(newVal, function(speed){\n          speed = speed || 1000;\n          // Center element on screen\n          if($element.parents('.reveal-modal').length) {\n            var targetWindow = $element.parents('.reveal-modal .content');\n            targetWindow.animate({\n              scrollTop: $element.offset().top - targetWindow.offset().top + targetWindow.scrollTop()\n            }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          }\n          else {\n            var offset = $element.offset().top;\n\n            // Use provider configured offset\n            var extraOffset = focusOnConfig.offset;\n\n            // If attribute is set override provider configured offset\n            if($attrs.focusOnOffset !== undefined){\n              extraOffset = parseInt($attrs.focusOnOffset);\n            }\n\n            // Check if provider or attribute set autoCenter/auto-center to true if so use offset/2 ignores the extra\n            // offset in this case\n            if( (focusOnConfig.autoCenter && $attrs.focusOnAutoCenter===undefined ) ||\n                ($attrs.focusOnAutoCenter && $attrs.focusOnAutoCenter=='true') ) {\n              offset = offset - window.innerHeight/2 - $element[0].clientHeight/2;\n            }\n            else{\n              offset = offset - extraOffset;\n            }\n\n            $('body').animate({ scrollTop: offset }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n})\n\n.provider('focusOnConfig', function(){\n  var _offset = 0;\n  var _autoCenter = false;\n\n  this.autoCenter = function(value){\n    _autoCenter = value;\n  };\n\n  this.offset = function(value){\n    _offset = value;\n  };\n\n  this.$get = function(){\n    return {\n      offset: _offset,\n      autoCenter:_autoCenter\n    };\n  };\n\n});\n","/**\n * autoGrow - Increases height of textarea while typing\n *\n * @note use with min-height, max-height and box-sizing:border-box\n *\n * @example\n * \t<textarea auto-grow></textarea>\n */\n angular.module('ts.utils').directive('autoGrow', function($timeout) {\n  return {\n    restrict: 'A',\n    link: function($scope, $element, $attrs) {\n      function grow() {\n        $element[0].style.height = 0; // autoshrink - need accurate scrollHeight\n        $element[0].style.height = $element[0].scrollHeight + 'px';\n      }\n      $element.on('input', grow);\n      $timeout(grow, true);\n    }\n  }\n});\n","(function(module) {\ntry {\n  module = angular.module('ts.utils');\n} catch (e) {\n  module = angular.module('ts.utils', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('templates/tsTooltip.html',\n    '<div class=\"ts-tooltip-container\">\\n' +\n    '  <div class=\"arrow-box-container\">\\n' +\n    '    <div id=\"tooltipMain\" class=\"ts-tooltip-main\">\\n' +\n    '      {{tsTooltip}}\\n' +\n    '    </div>\\n' +\n    '  </div>\\n' +\n    '</div>');\n}]);\n})();\n"],"sourceRoot":"/source/"}