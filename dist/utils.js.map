{"version":3,"sources":["utils.js","uiEvent.js","truncate.js","scrollOn.js","focusOn.js","autoGrow.js"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["angular.module('ts.utils', []);\n","/**\n * @TODO remove in liue of ui-utils\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\nangular.module('ts.utils').directive('uiEvent', function ($parse) {\n    return {\n        priority: 100,\n        link: function ($scope, $elm, $attrs) {\n            var events = $scope.$eval($attrs.uiEvent);\n            angular.forEach(events, function (uiEvent, eventName) {\n                var fn = $parse(uiEvent);\n                $elm.bind(eventName, function (evt) {\n                    var params = Array.prototype.slice.call(arguments);\n                    //Take out first paramater (event object);\n                    params = params.splice(1);\n                    fn($scope, {$event: evt, $params: params});\n                    if (!$scope.$$phase) {\n                        $scope.$apply();\n                    }\n                });\n            });\n        }\n    };\n});\n","/**\n * truncate - Truncates a string by a specified number of words\n *\n * @example\n * \t<p>\n * \t\t{{::post.body | truncate : 35}}\n * \t\t<a ng-if=\"::post.body.split(' ').length>35\">Read More</a>\n * \t</p>\n *\n * @param {string} value  The string to be truncated\n * @param {int} [wordLimit] The number of words to truncate at. If falsey, doesn't truncate.\n * @param {string} [ellipses] The string to use as an ellipses. Default: '…' (&hellip;)\n */\n angular.module('ts.utils').filter('tsTruncate', function() {\n  return function(value, wordLimit, ellipses = '…'){\n    if (!value || !angular.isNumber(wordLimit))\n      return value;\n\n    var words = value.split(' ');\n\n    if (words.length > wordLimit) {\n      value = words.slice(0, wordLimit).join(' ');\n\n      if (ellipses)\n        value += ellipses;\n    }\n\n    return value;\n  }\n});\n","\n/**\n * scrollOn - $broadcast()/$emit() a $scope event with the location to trigger scrolling\n *\n * @example\n *   <ul scroll-on=\"someEventName\" style=\"overflow: auto\">...</ul>\n *   ...\n *   var location = 'bottom';\n *   $scope.$broadcast('someEventName', location)\n *\n * @param location {'top'|'bottom'|offset} must be passed as event data\n */\nangular.module('ts.utils').directive('scrollOn', function($timeout) {\n  return {\n    link: {\n      pre: function($scope, $element, $attrs) {\n        $scope.$on($attrs.scrollOn, function(event, location){\n          // let updates render\n          $timeout(function(){\n            if (location === 'bottom') {\n              $element[0].scrollTop = $element[0].scrollHeight;\n            }\n            else if (location === 'top') {\n              $element[0].scrollTop = 0;\n            }\n            else {\n              $element[0].scrollTop = location;\n            }\n          }, true);\n        });\n      }\n    }\n  };\n});\n","/**\n * focusOn - Focuses an input on scope event\n *\n * @note depends on jQuery\n *\n * @example\n *   <input focus-on=\"someEventName\">\n *   or\n *   <input focus-on=\"focus-row-{{$index}}\">\n *   or\n *   <p focus-on=\"anotherEvent\"></p>\n *   ...\n *   $scope.$broadcast('someEventName');\n *   $scope.$broadcast('focus-row-2');\n *   $scope.$broadcast('anotherEvent');\n *\n */\n angular.module('ts.utils').directive('focusOn', function($window){\n  return {\n    link: function($scope, $element, $attrs) {\n      var listener = angular.noop;\n      $attrs.$observe('focusOn', function(newVal){\n        // Stop listening to old event name\n        listener();\n        // Listen to new event name\n        listener = $scope.$on(newVal, function(speed = 1000){\n          // Center element on screen\n          if($element.parents('.reveal-modal').length) {\n            var targetWindow = $element.parents('.reveal-modal .content');\n            targetWindow.animate({ scrollTop: $element.offset().top - targetWindow.offset().top + targetWindow.scrollTop() }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          }\n          else {\n            var offset = $element.offset().top;\n            $('body').animate({ scrollTop: offset }, {\n              speed: speed,\n              complete: function complete() {\n                // Focus element (if input)\n                $element[0].focus();\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n});\n","/**\n * autoGrow - Increases height of textarea while typing\n *\n * @note use with min-height, max-height and box-sizing:border-box\n *\n * @example\n * \t<textarea auto-grow></textarea>\n */\n angular.module('ts.utils').directive('autoGrow', function($timeout) {\n  return {\n    restrict: 'A',\n    link: function($scope, $element, $attrs) {\n      function grow() {\n        $element[0].style.height = 0; // autoshrink - need accurate scrollHeight\n        $element[0].style.height = $element[0].scrollHeight + 'px';\n      }\n      $element.on('input', grow);\n      $timeout(grow, true);\n    }\n  }\n});\n"],"sourceRoot":"/source/"}